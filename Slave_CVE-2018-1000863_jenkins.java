public class Slave {
        private Object readResolve() {
            long endTime = System.currentTimeMillis();
            return new ClockDifference((startTime + endTime)/2-remoteTime);
        }

    public ComputerLauncher getLauncher() {
        if (launcher == null && !StringUtils.isEmpty(agentCommand)) {
            try {
                launcher = (ComputerLauncher) Jenkins.getInstance().getPluginManager().uberClassLoader.loadClass("hudson.slaves.CommandLauncher").getConstructor(String.class, EnvVars.class).newInstance(agentCommand, null);
                agentCommand = null;
                save();
            } catch (Exception x) {
                LOGGER.log(Level.WARNING, "could not update historical agentCommand setting to CommandLauncher", x);
            }
        }
        // Default launcher does not use Work Directory
        return launcher == null ? new JNLPLauncher(false) : launcher;
    }

        public URL getURL() throws IOException {
            String name = fileName;
            
            // Prevent the access to war contents & prevent the folder escaping (SECURITY-195)
            if (!ALLOWED_JNLPJARS_FILES.contains(name)) {
                throw new MalformedURLException("The specified file path " + fileName + " is not allowed due to security reasons");
            }
            
            if (name.equals("hudson-cli.jar") || name.equals("jenkins-cli.jar"))  {
                File cliJar = Which.jarFile(CLI.class);
                if (cliJar.isFile()) {
                    name = "jenkins-cli.jar";
                } else {
                    URL res = findExecutableJar(cliJar, CLI.class);
                    if (res != null) {
                        return res;
                    }
                }
            } else if (name.equals("agent.jar") || name.equals("slave.jar") || name.equals("remoting.jar")) {
                File remotingJar = Which.jarFile(hudson.remoting.Launcher.class);
                if (remotingJar.isFile()) {
                    name = "lib/" + remotingJar.getName();
                } else {
                    URL res = findExecutableJar(remotingJar, hudson.remoting.Launcher.class);
                    if (res != null) {
                        return res;
                    }
                }
            }
            
            URL res = Jenkins.getInstance().servletContext.getResource("/WEB-INF/" + name);
            if(res==null) {
                throw new FileNotFoundException(name); // giving up
            } else {
                LOGGER.log(Level.FINE, "found {0}", res);
            }
            return res;
        }

        private @CheckForNull URL findExecutableJar(File notActuallyJAR, Class<?> mainClass) throws IOException {
            if (notActuallyJAR.getName().equals("classes")) {
                File[] siblings = notActuallyJAR.getParentFile().listFiles();
                if (siblings != null) {
                    for (File actualJar : siblings) {
                        if (actualJar.getName().endsWith(".jar")) {
                            try (JarFile jf = new JarFile(actualJar, false)) {
                                Manifest mf = jf.getManifest();
                                if (mf != null && mainClass.getName().equals(mf.getMainAttributes().getValue("Main-Class"))) {
                                    LOGGER.log(Level.FINE, "found {0}", actualJar);
                                    return actualJar.toURI().toURL();
                                }
                            }
                        }
                    }
                }
            }
            return null;
        }

}