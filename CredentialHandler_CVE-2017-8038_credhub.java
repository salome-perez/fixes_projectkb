public class CredentialHandler {
  public void deleteCredential(UserContext userContext, String credentialName) {
    if (!permissionService.hasPermission(userContext.getAclUser(), credentialName, DELETE)) {
      throw new EntryNotFoundException("error.credential.invalid_access");
    }

    boolean deleteSucceeded = credentialDataService.delete(credentialName);

    if (!deleteSucceeded) {
      throw new EntryNotFoundException("error.credential.invalid_access");
    }
  }

  public List<Credential> getAllCredentialVersions(
      UserContext userContext,
      List<EventAuditRecordParameters> auditRecordParametersList,
      String credentialName
  ) {
    EventAuditRecordParameters auditRecordParameters = new EventAuditRecordParameters(AuditingOperationCode.CREDENTIAL_ACCESS, credentialName);
    auditRecordParametersList.add(auditRecordParameters);

    List<Credential> credentials = credentialDataService.findAllByName(credentialName);

    // We need this extra check in case permissions aren't being enforced.
    if (credentials.isEmpty() || !permissionService.hasPermission(userContext.getAclUser(), credentialName, READ)) {
      throw new EntryNotFoundException("error.credential.invalid_access");
    }

    return credentials;
  }

  private Credential getVersionByIdentifier(
      UserContext userContext,
      List<EventAuditRecordParameters> auditRecordParametersList,
      String identifier,
      Function<String, Credential> getFn
  ) {
    EventAuditRecordParameters eventAuditRecordParameters = new EventAuditRecordParameters(
        AuditingOperationCode.CREDENTIAL_ACCESS
    );

    Credential credential = getFn.apply(identifier);

    if (credential != null) {
      eventAuditRecordParameters.setCredentialName(credential.getName());
    }

    auditRecordParametersList.add(eventAuditRecordParameters);

    if (credential == null || !permissionService.hasPermission(userContext.getAclUser(), credential.getName(), READ)) {
      throw new EntryNotFoundException("error.credential.invalid_access");
    }

    return credential;
  }

  public Credential getCredentialVersion(
      UserContext userContext,
      List<EventAuditRecordParameters> auditRecordParametersList,
      String credentialUuid
  ) {
    return getVersionByIdentifier(
        userContext,
        auditRecordParametersList,
        credentialUuid,
        credentialDataService::findByUuid
    );
  }

  public Credential getMostRecentCredentialVersion(
      UserContext userContext,
      List<EventAuditRecordParameters> auditRecordParametersList,
      String credentialName
  ) {
    Credential credential = getVersionByIdentifier(
        userContext,
        auditRecordParametersList,
        credentialName,
        credentialDataService::findMostRecent
    );
    return credential;
  }

}