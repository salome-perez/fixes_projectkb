public class LocalizedResource {
    @Override
    public long downloadToTempLocation(ClientBlobStore store) throws IOException, KeyNotFoundException, AuthorizationException {
        String key = getKey();
        ReadableBlobMeta meta = store.getBlobMeta(key);
        if (!ServerUtils.canUserReadBlob(meta, user, conf)) {
            throw new AuthorizationException(user + " does not have READ access to " + key);
        }
        long version;
        Path downloadFile;
        Path finalLocation;
        try (InputStreamWithMeta in = store.getBlob(key)) {
            version = in.getVersion();
            finalLocation = constructBlobWithVersionFileName(baseDir, getKey(), version);
            if (uncompressed) {
                // we need to download to temp file and then unpack into the one requested
                downloadFile = tmpOutputLocation();
            } else {
                downloadFile = finalLocation;
            }
            byte[] buffer = new byte[1024];
            int len;
            LOG.debug("Downloading {} to {}", key, downloadFile);
            Path parent = downloadFile.getParent();
            if (!Files.exists(parent)) {
                //There is a race here that we can still lose
                try {
                    Files.createDirectory(parent);
                } catch (FileAlreadyExistsException e) {
                    //Ignored
                }
            }
            try (FileOutputStream out = new FileOutputStream(downloadFile.toFile())) {
                while ((len = in.read(buffer)) >= 0) {
                    out.write(buffer, 0, len);
                }
            }
        }
        if (uncompressed) {
            ServerUtils.unpack(downloadFile.toFile(), finalLocation.toFile(), symLinksDisabled);
            LOG.debug("Uncompressed {} to: {}", downloadFile, finalLocation);
        }
        setBlobPermissions(conf, user, finalLocation);
        return version;
    }

}