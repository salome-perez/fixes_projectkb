public class AnnotationProxy {
	private Object getAnnotationMemberValue(Annotation annotation, String name) {
		try {
			return run( GetDeclaredMethod.action( annotation.annotationType(), name ) ).invoke( annotation );
		}
		catch ( IllegalAccessException e ) {
			throw log.getUnableToRetrieveAnnotationParameterValueException( e );
		}
		catch ( IllegalArgumentException e ) {
			throw log.getUnableToRetrieveAnnotationParameterValueException( e );
		}
		catch ( InvocationTargetException e ) {
			throw log.getUnableToRetrieveAnnotationParameterValueException( e );
		}
	}

	private Map<String, Object> getAnnotationValues(AnnotationDescriptor<?> descriptor) {
		Map<String, Object> result = newHashMap();
		int processedValuesFromDescriptor = 0;
		final Method[] declaredMethods = run( GetDeclaredMethods.action( annotationType ) );
		for ( Method m : declaredMethods ) {
			if ( descriptor.containsElement( m.getName() ) ) {
				result.put( m.getName(), descriptor.valueOf( m.getName() ) );
				processedValuesFromDescriptor++;
			}
			else if ( m.getDefaultValue() != null ) {
				result.put( m.getName(), m.getDefaultValue() );
			}
			else {
				throw log.getNoValueProvidedForAnnotationParameterException(
						m.getName(),
						annotationType.getSimpleName()
				);
			}
		}
		if ( processedValuesFromDescriptor != descriptor.numberOfElements() ) {

			Set<String> unknownParameters = descriptor.getElements().keySet();
			unknownParameters.removeAll( result.keySet() );

			throw log.getTryingToInstantiateAnnotationWithUnknownParametersException(
					annotationType,
					unknownParameters
			);
		}
		return result;
	}

}