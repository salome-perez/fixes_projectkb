public class CLICommand {
    @Deprecated
    protected Authentication loadStoredAuthentication() throws InterruptedException {
        try {
            if (channel!=null){
                Authentication authLoadedFromCache = new ClientAuthenticationCache(channel).get();

                if(!ACL.isAnonymous(authLoadedFromCache)){
                    UserDetails userDetails = new CLIUserDetails(authLoadedFromCache);
                    SecurityListener.fireAuthenticated(userDetails);
                }

                return authLoadedFromCache;
            }
        } catch (IOException e) {
            stderr.println("Failed to access the stored credential");
            Functions.printStackTrace(e, stderr);  // recover
        }
        return Jenkins.ANONYMOUS;
    }

    public int main(List<String> args, Locale locale, InputStream stdin, PrintStream stdout, PrintStream stderr) {
        this.stdin = new BufferedInputStream(stdin);
        this.stdout = stdout;
        this.stderr = stderr;
        this.locale = locale;
        registerOptionHandlers();
        CmdLineParser p = getCmdLineParser();

        // add options from the authenticator
        SecurityContext sc = null;
        Authentication old = null;
        try {
            sc = SecurityContextHolder.getContext();
            old = sc.getAuthentication();

            CliAuthenticator authenticator = Jenkins.getActiveInstance().getSecurityRealm().createCliAuthenticator(this);
            sc.setAuthentication(getTransportAuthentication());
            new ClassParser().parse(authenticator,p);

            if (!(this instanceof LoginCommand || this instanceof LogoutCommand || this instanceof HelpCommand || this instanceof WhoAmICommand))
                Jenkins.getActiveInstance().checkPermission(Jenkins.READ);
            p.parseArgument(args.toArray(new String[args.size()]));
            Authentication auth = authenticator.authenticate();
            if (auth==Jenkins.ANONYMOUS)
                auth = loadStoredAuthentication();
            sc.setAuthentication(auth); // run the CLI with the right credential
            if (!(this instanceof LoginCommand || this instanceof LogoutCommand || this instanceof HelpCommand || this instanceof WhoAmICommand))
                Jenkins.getActiveInstance().checkPermission(Jenkins.READ);
            return run();
        } catch (CmdLineException e) {
            stderr.println("");
            stderr.println("ERROR: " + e.getMessage());
            printUsage(stderr, p);
            return 2;
        } catch (IllegalStateException e) {
            stderr.println("");
            stderr.println("ERROR: " + e.getMessage());
            return 4;
        } catch (IllegalArgumentException e) {
            stderr.println("");
            stderr.println("ERROR: " + e.getMessage());
            return 3;
        } catch (AbortException e) {
            // signals an error without stack trace
            stderr.println("");
            stderr.println("ERROR: " + e.getMessage());
            return 5;
        } catch (AccessDeniedException e) {
            stderr.println("");
            stderr.println("ERROR: " + e.getMessage());
            return 6;
        } catch (BadCredentialsException e) {
            // to the caller, we can't reveal whether the user didn't exist or the password didn't match.
            // do that to the server log instead
            String id = UUID.randomUUID().toString();
            LOGGER.log(Level.INFO, "CLI login attempt failed: " + id, e);
            stderr.println("");
            stderr.println("ERROR: Bad Credentials. Search the server log for " + id + " for more details.");
            return 7;
        } catch (Throwable e) {
            final String errorMsg = String.format("Unexpected exception occurred while performing %s command.",
                    getName());
            stderr.println("");
            stderr.println("ERROR: " + errorMsg);
            LOGGER.log(Level.WARNING, errorMsg, e);
            Functions.printStackTrace(e, stderr);
            return 1;
        } finally {
            if(sc != null)
                sc.setAuthentication(old); // restore
        }
    }

}