public class XBProjector {
    @Override
    @Scope(DocScope.IO)
    public <T> T projectXMLString(final String xmlContent, final Class<T> projectionInterface) {
        try {
            final ByteArrayInputStream inputStream = new ByteArrayInputStream(xmlContent.getBytes("utf-8"));
            return new StreamInput(this, inputStream).read(projectionInterface);
        } catch (IOException e) {
            throw new XBIOException(e);
        }
    }

    @Scope(DocScope.IO)
    public CanEvaluateOrProject onXMLString(final String xmlContent) {
        try {
            final ByteArrayInputStream inputStream = new ByteArrayInputStream(xmlContent.getBytes("utf-8"));
            return new CanEvaluateOrProject() {
                @Override
                public XPathEvaluator evalXPath(final String xpath) {
                    return new DefaultXPathEvaluator(XBProjector.this, new DocumentResolver() {
                        @Override
                        public Document resolve(final Class<?>... resourceAwareClass) {
                            return IOHelper.loadDocument(XBProjector.this, inputStream);
                        }
                    }, xpath);
                }

                @Override
                public <T> T createProjection(final Class<T> projectionInterface) {
                    return projectXMLString(xmlContent, projectionInterface);
                }

                @Override
                public <T> XBAutoMap<T> createMapOf(final Class<T> valueType) {
                    final Document document = IOHelper.loadDocument(XBProjector.this, inputStream);
                    return createAutoMapForDocument(valueType, document);
                }
            };
        } catch (IOException e) {
            throw new XBIOException(e);
        }
    }

}