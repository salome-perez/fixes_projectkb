public class NetworkServerControlImpl {
    protected synchronized void processCommands(DDMReader reader, DDMWriter writer, 
        Session session) throws Throwable
    {
        try {
            String protocolStr = reader.readCmdString(4);
            String locale = DEFAULT_LOCALE;
            String codeset = 
                PropertyUtil.getSystemProperty(LocalizedResource.ENV_CODESET);
            // get the version
            int version = reader.readNetworkShort();
            if (version <= 0 || version > MAX_ALLOWED_PROTOCOL_VERSION) {
                throw new Throwable(langUtil.getTextMessage(
                        "DRDA_UnknownProtocol.S", version));
            }
            int localeLen = reader.readByte();
            if (localeLen > 0)
            {
                currentSession = session;
                locale = reader.readCmdString(localeLen);
                session.langUtil = new LocalizedResource(codeset,locale,DRDA_PROP_MESSAGES);
            }
            String notLocalMessage = null;
            // for now codesetLen is always 0
            int codesetLen = reader.readByte();
            int command = reader.readByte();
            if (command !=  COMMAND_TESTCONNECTION)
            {
                try {
                    checkAddressIsLocal(session.clientSocket.getInetAddress());
                }catch (Exception e)
                {
                    notLocalMessage = e.getMessage();
                }
            }
            if (notLocalMessage != null)
            {
                sendMessage(writer, ERROR,notLocalMessage);
                session.langUtil = null;
                currentSession = null;
                return;
            }

            switch(command)
            {
                case COMMAND_SHUTDOWN:
                    if (version == SHUTDOWN_WITH_CREDENTIAL_PROTOCOL_VERSION) {
                        //Protocol version of client is not at default protocol
                        //of 1 because this version of shutdown command has
                        //username and password supplied with it. When the
                        //protocol version of client is 
                        //SHUTDOWN_WITH_CREDENTIAL_PROTOCOL_VERSION, then we 
                        //know to expect username and password
                        // DERBY-2109: receive user credentials for shutdown
                        // System Privileges check
                        userArg = reader.readCmdString();
                        passwordArg = reader.readCmdString();
                    }
                    try {
                        checkShutdownPrivileges();
                        sendOK(writer);
                        directShutdownInternal();
                    } catch (SQLException sqle) {
                        sendSQLMessage(writer, sqle, SQLERROR);
                        // also print a message to the console
                        consolePropertyMessage("DRDA_ShutdownWarning.I",
                                               sqle.getMessage());
                    }
                    break;
                case COMMAND_TRACE:
                    sessionArg = reader.readNetworkInt();
                    boolean on = (reader.readByte() == 1);
                    if (setTrace(on))
                    {
                        sendOK(writer);
                    }
                    else
                    {
                        if (sessionArg != 0)
                            sendMessage(writer, ERROR,  
                                localizeMessage("DRDA_SessionNotFound.U", 
                                        (session.langUtil == null) ? langUtil : session.langUtil,
                                        new String [] {Integer.toString(sessionArg)}));
                        else
                            sendMessage(writer, ERROR,  
                                        localizeMessage("DRDA_ErrorStartingTracing.S",null));          
                    }
                    break;
                case COMMAND_TRACEDIRECTORY:
                    setTraceDirectory(reader.readCmdString());
                    sendOK(writer);
                    consolePropertyMessage("DRDA_TraceDirectoryChange.I", traceDirectory);
                    break;
                case COMMAND_TESTCONNECTION:
                    databaseArg = reader.readCmdString(); // This is ...
                    userArg = reader.readCmdString(); // ... no longer ...
                    passwordArg = reader.readCmdString(); // ... supported.
                    if (databaseArg != null)
                        sendMessage(writer, ERROR, "Usage: ping()");
                    else
                        sendOK(writer);
                    break;
                case COMMAND_LOGCONNECTIONS:
                    boolean log = (reader.readByte() == 1);
                    setLogConnections(log);
                    sendOK(writer);
                    logConnectionsChange( log );
                    break;
                case COMMAND_SYSINFO:
                    sendSysInfo(writer);
                    break;
                case COMMAND_PROPERTIES:
                    sendPropInfo(writer);
                    break;
                case COMMAND_RUNTIME_INFO:
                    sendRuntimeInfo(writer);
                    break;
                case COMMAND_MAXTHREADS:
                    int max = reader.readNetworkInt();
                    try {
                        setMaxThreads(max);
                    }catch (Exception e) {
                        sendMessage(writer, ERROR, e.getMessage());
                        return;
                    }
                    int newval = getMaxThreads();
                    sendOKInt(writer, newval);
                    consolePropertyMessage("DRDA_MaxThreadsChange.I", 
                        String.valueOf(newval));
                    break;
                case COMMAND_TIMESLICE:
                    int timeslice = reader.readNetworkInt();
                    try {
                        setTimeSlice(timeslice);
                    }catch (Exception e) {
                        sendMessage(writer, ERROR, e.getMessage());
                        return;
                    }
                    newval = getTimeSlice();
                    sendOKInt(writer, newval);
                    consolePropertyMessage("DRDA_TimeSliceChange.I", 
                        String.valueOf(newval));
                    break;
            }
        } catch (DRDAProtocolException e) {
            //we need to handle this since we aren't in DRDA land here
            consoleExceptionPrintTrace(e);

        } catch (Exception e) {
            consoleExceptionPrintTrace(e);
        }
        finally {
            session.langUtil = null;
            currentSession = null;
        }
    }
}