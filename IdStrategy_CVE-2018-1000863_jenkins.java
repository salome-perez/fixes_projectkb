public class IdStrategy {
    String applyPatternRepeatedly(@Nonnull Pattern pattern, @Nonnull String filename,
                                  @Nonnull Function<String, Character> converter) {
        StringBuilder id = new StringBuilder();
        int beginIndex = 0;
        Matcher matcher = pattern.matcher(filename);
        while (matcher.find()) {
            String group = matcher.group();
            id.append(filename, beginIndex, matcher.start());
            id.append(converter.apply(group));
            beginIndex = matcher.end();
        }
        id.append(filename.substring(beginIndex));
        return id.toString();
    }

        @Override
        public int compare(@Nonnull String id1, @Nonnull String id2) {
            return keyFor(id1).compareTo(keyFor(id2));
        }

        @Override
        @Nonnull
        public String keyFor(@Nonnull String id) {
            int index = id.lastIndexOf('@'); // The @ can be used in local-part if quoted correctly
            // => the last @ is the one used to separate the domain and local-part
            return index == -1 ? id : id.substring(0, index) + (id.substring(index).toLowerCase(Locale.ENGLISH));
        }

        public String idFromFilename(@Nonnull String filename) {
            String id = applyPatternRepeatedly(CAPITALIZATION_PATTERN, filename, this::convertCapitalizedAscii);
            return applyPatternRepeatedly(PSEUDO_UNICODE_PATTERN, id, this::convertPseudoUnicode);
        }

    Character convertPseudoUnicode(String matchedGroup) {
        return (char) Integer.parseInt(matchedGroup.substring(1), 16);
    }

    public static DescriptorExtensionList<IdStrategy, IdStrategyDescriptor> all() {
        return Jenkins.get().getDescriptorList(IdStrategy.class);
    }

    public String filenameOf(@Nonnull String id) {
        return null;
    }

    @Deprecated
    @Restricted(ProtectedExternally.class)
    public String legacyFilenameOf(@Nonnull String id) {
        return null;
    }

        private Character convertCapitalizedAscii(String encoded) {
            return encoded.toUpperCase().charAt(1);
        }

}