public class Computer {
    public List<String> call() throws IOException {
        List<String> names = new ArrayList<String>();

        Enumeration<NetworkInterface> nis = NetworkInterface.getNetworkInterfaces();
        while (nis.hasMoreElements()) {
            NetworkInterface ni =  nis.nextElement();
            LOGGER.log(Level.FINE, "Listing up IP addresses for {0}", ni.getDisplayName());
            Enumeration<InetAddress> e = ni.getInetAddresses();
            while (e.hasMoreElements()) {
                InetAddress ia =  e.nextElement();
                if(ia.isLoopbackAddress()) {
                    LOGGER.log(Level.FINE, "{0} is a loopback address", ia);
                    continue;
                }

                if(!(ia instanceof Inet4Address)) {
                    LOGGER.log(Level.FINE, "{0} is not an IPv4 address", ia);
                    continue;
                }

                LOGGER.log(Level.FINE, "{0} is a viable candidate", ia);
                names.add(ia.getHostAddress());
            }
        }
        return names;
    }    
    @RequirePOST
    public void doConfigSubmit( StaplerRequest req, StaplerResponse rsp ) throws IOException, ServletException, FormException {
        checkPermission(CONFIGURE);

        String proposedName = Util.fixEmptyAndTrim(req.getSubmittedForm().getString("name"));
        Jenkins.checkGoodName(proposedName);

        Node node = getNode();
        if (node == null) {
            throw new ServletException("No such node " + nodeName);
        }

        if ((!proposedName.equals(nodeName))
                && Jenkins.getActiveInstance().getNode(proposedName) != null) {
            throw new FormException(Messages.ComputerSet_SlaveAlreadyExists(proposedName), "name");
        }

        String nExecutors = req.getSubmittedForm().getString("numExecutors");
        if (StringUtils.isBlank(nExecutors) || Integer.parseInt(nExecutors)<=0) {
            throw new FormException(Messages.Slave_InvalidConfig_Executors(nodeName), "numExecutors");
        }

        Node result = node.reconfigure(req, req.getSubmittedForm());
        Jenkins.getInstance().getNodesObject().replaceNode(this.getNode(), result);

        // take the user back to the agent top page.
        rsp.sendRedirect2("../" + result.getNodeName() + '/');
    }
}