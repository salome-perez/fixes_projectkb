public class CredentialsController {
  @RequestMapping(path = "", params = "paths=true", method = RequestMethod.GET)
  @ResponseStatus(HttpStatus.OK)
  public FindPathResults findPaths(RequestUuid requestUuid, UserContext userContext) {
    return eventAuditLogService.auditEvents(requestUuid, userContext, eventAuditRecordParametersList -> {
      eventAuditRecordParametersList.add(new EventAuditRecordParameters(CREDENTIAL_FIND));
      List<String> paths = credentialDataService.findAllPaths();
      return FindPathResults.fromEntity(paths);
    });
  }

  @ResponseStatus(HttpStatus.OK)
  public CredentialView getCredentialById(
      @PathVariable String id,
      RequestUuid requestUuid,
      UserContext userContext) {
    return eventAuditLogService.auditEvents(requestUuid, userContext, eventAuditRecordParametersList -> {
      Credential credentialVersion = credentialHandler.getCredentialVersion(userContext, eventAuditRecordParametersList, id);
      return CredentialView.fromEntity(credentialVersion);
    });
  }

  @RequestMapping(path = "", method = RequestMethod.DELETE)
  @ResponseStatus(HttpStatus.NO_CONTENT)
  public void delete(
      @RequestParam(value = "name") String credentialName,
      RequestUuid requestUuid,
      UserContext userContext
  ) {
    if (StringUtils.isEmpty(credentialName)) {
      throw new InvalidQueryParameterException("error.missing_query_parameter", "name");
    }

    eventAuditLogService.auditEvents(requestUuid, userContext, (eventAuditRecordParametersList) -> {
      eventAuditRecordParametersList.add(new EventAuditRecordParameters(CREDENTIAL_DELETE, credentialName));

      credentialHandler.deleteCredential(userContext, credentialName);

      return true;
    });
  }

  @RequestMapping(path = "/{id}

  @GetMapping(path = "")
  @ResponseStatus(HttpStatus.OK)
  public DataResponse getCredential(
      @RequestParam(value = "name") String credentialName,
      @RequestParam(value = "current", required = false, defaultValue = "false") boolean current,
      RequestUuid requestUuid,
      UserContext userContext) {
    if (StringUtils.isEmpty(credentialName)) {
      throw new InvalidQueryParameterException("error.missing_query_parameter", "name");
    }

    return eventAuditLogService.auditEvents(requestUuid, userContext, eventAuditRecordParametersList -> {
      List<Credential> credentials;
      if (current) {
        Credential credential = credentialHandler.getMostRecentCredentialVersion(userContext, eventAuditRecordParametersList, credentialName);
        credentials = singletonList(credential);
      } else {
        credentials = credentialHandler.getAllCredentialVersions(userContext, eventAuditRecordParametersList, credentialName);
      }
      return DataResponse.fromEntity(credentials);
    });
  }

  private FindCredentialResults findWithAuditing(String nameSubstring,
      Function<String, List<FindCredentialResult>> finder,
      RequestUuid requestUuid,
      UserContext userContext) {
    return eventAuditLogService
        .auditEvents(requestUuid, userContext, eventAuditRecordParametersList -> {
          eventAuditRecordParametersList.add(new EventAuditRecordParameters(CREDENTIAL_FIND));
          return new FindCredentialResults(finder.apply(nameSubstring));
        });
  }

}