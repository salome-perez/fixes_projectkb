public class NetworkServerControl {
    private static  void installSecurityManager( NetworkServerControlImpl server )
        throws Exception
    {
        //
        // The Basic policy refers to some properties. Make sure they are set.
        //
        if ( PropertyUtil.getSystemProperty( Property.SYSTEM_HOME_PROPERTY ) == null )
        { System.setProperty( Property.SYSTEM_HOME_PROPERTY, PropertyUtil.getSystemProperty( "user.dir" ) ); }

        //
        // Make sure the following property is set so that it can be substituted into the
        // policy file. That will let us grant write permission on the server's
        // trace file.
        //
        if ( PropertyUtil.getSystemProperty( Property.DRDA_PROP_TRACEDIRECTORY ) == null )
        { System.setProperty( Property.DRDA_PROP_TRACEDIRECTORY, PropertyUtil.getSystemProperty( Property.SYSTEM_HOME_PROPERTY ) ); }

        //
        // Forcibly set the following property so that it will be correctly
        // substituted into the default policy file. This is the hostname for
        // SocketPermissions. This is an internal property which customers
        // may not override.
        //
        System.setProperty( Property.DERBY_SECURITY_HOST, getHostNameForSocketPermission( server ) );

        //
        // Forcibly set the following property so that it will be correctly
        // substituted into the default policy file. This is the hostname for
        // SocketPermissions. This is an internal property which customers
        // may not override.
        //
        System.setProperty(Property.DERBY_SECURITY_PORT,
                           String.valueOf(server.getPort()));

        //
        // Forcibly set the following property. This is the parameter in
        // the Basic policy which points at the directory where the embedded and
        // network codesources. Do not let the customer
        // override this
        //
        URL    derbyInstallURL = getCodeSourceURL( server );
        String derbyInstallStr = getCodeSourcePrefix( server, derbyInstallURL );
        String derbyInstallPth = new File(derbyInstallURL.getFile())
                                 .getParentFile().getAbsolutePath();

        System.setProperty( Property.DERBY_INSTALL_URL, derbyInstallStr );
        System.setProperty( Property.DERBY_INSTALL_PATH, derbyInstallPth );

        //
        // Now install a SecurityManager, using the Basic policy file.
        //
        String      policyFileURL = getPolicyFileURL();

        System.setProperty( POLICY_FILE_PROPERTY, policyFileURL );
        
        SecurityManager     securityManager = new SecurityManager();

        System.setSecurityManager( securityManager );

        // Report success.
        if (securityManager.equals(System.getSecurityManager())) {
            String successMessage = server.localizeMessage(
                    "DRDA_SecurityInstalled.I", null);
            server.consoleMessage(successMessage, true);
        }
    }

	private static String getCodeSourcePrefix(
                NetworkServerControlImpl server,
                URL url )
		throws Exception
	{
        // Replace in "file://some", but not in "file:///some".
        String extForm = url.toExternalForm().replaceFirst(
                "^file://([^/].*)", "file:////$1");
        int idx = extForm.indexOf(DERBYNET_JAR);

        //
        // If the customer isn't running against jar files, our Basic policy
        // won't work.
        //
        if ( idx < 0 )
        {
            String  errorMessage = server.localizeMessage( "DRDA_MissingNetworkJar.S", null );

            // this throws an exception and exits this method
            server.consoleError( errorMessage );
        }

        //
        // Otherwise, we have the directory prefix for our url.
        //
        String directoryPrefix = extForm.substring(0, idx);

        return directoryPrefix;
    }

    private static  URL  getCodeSourceURL( NetworkServerControlImpl server )
        throws Exception
    {
        // Note: This method is expected to run only when no security manager
        //       has been installed, hence no use of privileged blocks.
        ProtectionDomain pd = NetworkServerControl.class.getProtectionDomain();
        CodeSource cs = pd.getCodeSource();
        if (cs == null) {
            return null;
        }
        URL url = cs.getLocation();
		return url;
	}

}