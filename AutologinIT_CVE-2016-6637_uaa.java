public class AutologinIT {
    @Test
    public void testSimpleAutologinFlow() throws Exception {
        HttpHeaders headers = getAppBasicAuthHttpHeaders();

        LinkedMultiValueMap<String, String> requestBody = new LinkedMultiValueMap<>();
        requestBody.add("username", testAccounts.getUserName());
        requestBody.add("password", testAccounts.getPassword());

        //generate an autologin code with our credentials
        ResponseEntity<Map> autologinResponseEntity = restOperations.exchange(baseUrl + "/autologin",
                                                                              HttpMethod.POST,
                                                                              new HttpEntity<>(requestBody, headers),
                                                                              Map.class);
        String autologinCode = (String) autologinResponseEntity.getBody().get("code");

        //start the authorization flow - this will issue a login event
        //by using the autologin code
        String authorizeUrl = UriComponentsBuilder.fromHttpUrl(baseUrl)
            .path("/oauth/authorize")
            .queryParam("redirect_uri", appUrl)
            .queryParam("response_type", "code")
            .queryParam("client_id", "app")
            .queryParam("code", autologinCode)
            .build().toUriString();

        //rest template that does NOT follow redirects
        RestTemplate template = new RestTemplate(new DefaultIntegrationTestConfig.HttpClientFactory());
        headers.remove("Authorization");
        headers.add(HttpHeaders.ACCEPT, MediaType.TEXT_HTML_VALUE);
        ResponseEntity<String> authorizeResponse = template.exchange(authorizeUrl,
                                                                     HttpMethod.GET,
                                                                     new HttpEntity<>(new HashMap<String, String>(), headers),
                                                                     String.class);


        //we are now logged in. retrieve the JSESSIONID
        List<String> cookies = authorizeResponse.getHeaders().get("Set-Cookie");
        assertEquals(2, cookies.size());
        headers = getAppBasicAuthHttpHeaders();
        headers.add("Cookie", cookies.get(0));
        headers.add("Cookie", cookies.get(1));

        //if we receive a 200, then we must approve our scopes
        if (HttpStatus.OK == authorizeResponse.getStatusCode()) {
            authorizeUrl = UriComponentsBuilder.fromHttpUrl(baseUrl)
                .path("/oauth/authorize")
                .queryParam("user_oauth_approval", "true")
                .queryParam(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(authorizeResponse.getBody()))
                .build().toUriString();
            authorizeResponse = template.exchange(authorizeUrl,
                                                  HttpMethod.POST,
                                                  new HttpEntity<>(new HashMap<String, String>(), headers),
                                                  String.class);
        }

        //approval is complete, we receive a token code back
        assertEquals(HttpStatus.FOUND, authorizeResponse.getStatusCode());
        List<String> location = authorizeResponse.getHeaders().get("Location");
        assertEquals(1, location.size());
        String newCode = location.get(0).substring(location.get(0).indexOf("code=") + 5);

        //request a token using our code
        String tokenUrl = UriComponentsBuilder.fromHttpUrl(baseUrl)
            .path("/oauth/token")
            .queryParam("response_type", "token")
            .queryParam("grant_type", "authorization_code")
            .queryParam("code", newCode)
            .queryParam("redirect_uri", appUrl)
            .build().toUriString();

        ResponseEntity<Map> tokenResponse = template.exchange(
            tokenUrl,
            HttpMethod.POST,
            new HttpEntity<>(new HashMap<String, String>(), headers),
            Map.class);
        assertEquals(HttpStatus.OK, tokenResponse.getStatusCode());

        //here we must reset our state. we do that by following the logout flow.
        headers.clear();

        headers.set(headers.ACCEPT, MediaType.TEXT_HTML_VALUE);
        ResponseEntity<String> loginResponse = template.exchange(baseUrl + "/login",
                                                                 HttpMethod.GET,
                                                                 new HttpEntity<>(null, headers),
                                                                 String.class);

        if (loginResponse.getHeaders().containsKey("Set-Cookie")) {
            for (String cookie : loginResponse.getHeaders().get("Set-Cookie")) {
                if (!cookie.contains("1970")) { //deleted cookie
                    headers.add("Cookie", cookie);
                }
            }
        }
        String csrf = IntegrationTestUtils.extractCookieCsrf(loginResponse.getBody());
        requestBody.add(DEFAULT_CSRF_COOKIE_NAME, csrf);

        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        loginResponse = restOperations.exchange(baseUrl + "/login.do",
                                                HttpMethod.POST,
                                                new HttpEntity<>(requestBody, headers),
                                                String.class);
        cookies = loginResponse.getHeaders().get("Set-Cookie");
        assertEquals(2, cookies.size());
        headers.clear();
        for (String cookie : loginResponse.getHeaders().get("Set-Cookie")) {
            headers.add("Cookie", cookie);
        }
        headers.add(HttpHeaders.ACCEPT, MediaType.TEXT_HTML_VALUE);
        ResponseEntity<String> profilePage =
            restOperations.exchange(baseUrl + "/profile",
                                    HttpMethod.GET,
                                    new HttpEntity<>(null, headers), String.class);

        String revokeApprovalsUrl = UriComponentsBuilder.fromHttpUrl(baseUrl)
            .path("/profile")
            .build().toUriString();
        requestBody.clear();
        requestBody.add("clientId", "app");
        requestBody.add("delete", "");
        requestBody.add(DEFAULT_CSRF_COOKIE_NAME, IntegrationTestUtils.extractCookieCsrf(profilePage.getBody()));
        ResponseEntity<Void> revokeResponse = template.exchange(revokeApprovalsUrl,
                                                                HttpMethod.POST,
                                                                new HttpEntity<>(requestBody, headers),
                                                                Void.class);
        assertEquals(HttpStatus.FOUND, revokeResponse.getStatusCode());
    }

}