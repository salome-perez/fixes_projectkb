public class IdpDAOJPAImpl {
    public static void domain2entity(Idp idp, IdpEntity entity) {
        //The ID must not be updated if the entity has got an id already (update case)
        if (idp.getId() > 0) {
            entity.setId(idp.getId());
        }

        entity.setCertificate(idp.getCertificate());
        entity.setCertificatePassword(idp.getCertificatePassword());
        entity.setRealm(idp.getRealm());
        entity.setServiceDescription(idp.getServiceDescription());
        entity.setServiceDisplayName(idp.getServiceDisplayName());
        entity.setHrds(idp.getHrds());
        entity.setIdpUrl(idp.getIdpUrl());
        entity.setProvideIdpList(idp.isProvideIdpList());
        entity.setStsUrl(idp.getStsUrl());
        entity.setUri(idp.getUri());
        entity.setUseCurrentIdp(idp.isUseCurrentIdp());
        entity.setRpSingleSignOutConfirmation(idp.isRpSingleSignOutConfirmation());
        entity.setRpSingleSignOutCleanupConfirmation(idp.isRpSingleSignOutCleanupConfirmation());
        entity.setAutomaticRedirectToRpAfterLogout(idp.isAutomaticRedirectToRpAfterLogout());
        entity.setDisableLogoutAddressValidation(idp.isDisableLogoutAddressValidation());

        entity.getAuthenticationURIs().clear();
        for (Map.Entry<String, String> item : idp.getAuthenticationURIs().entrySet()) {
            entity.getAuthenticationURIs().put(item.getKey(), item.getValue());
        }

        entity.getTokenTypesOffered().clear();
        for (String item : idp.getTokenTypesOffered()) {
            entity.getTokenTypesOffered().add(item);
        }

        entity.getSupportedProtocols().clear();
        for (String item : idp.getSupportedProtocols()) {
            entity.getSupportedProtocols().add(item);
        }
    }

    public static Idp entity2domain(IdpEntity entity, List<String> expandList) {
        Idp idp = new Idp();
        idp.setId(entity.getId());
        idp.setCertificate(entity.getCertificate());
        idp.setCertificatePassword(entity.getCertificatePassword());
        idp.setRealm(entity.getRealm());
        idp.setServiceDescription(entity.getServiceDescription());
        idp.setServiceDisplayName(entity.getServiceDisplayName());
        idp.setHrds(entity.getHrds());
        idp.setIdpUrl(entity.getIdpUrl());
        idp.setProvideIdpList(entity.isProvideIdpList());
        idp.setStsUrl(entity.getStsUrl());
        idp.setUri(entity.getUri());
        idp.setUseCurrentIdp(entity.isUseCurrentIdp());
        idp.setRpSingleSignOutConfirmation(entity.isRpSingleSignOutConfirmation());
        idp.setRpSingleSignOutCleanupConfirmation(entity.isRpSingleSignOutCleanupConfirmation());
        idp.setAutomaticRedirectToRpAfterLogout(entity.isAutomaticRedirectToRpAfterLogout());
        idp.setDisableLogoutAddressValidation(entity.isDisableLogoutAddressValidation());

        if (expandList != null && (expandList.contains("all") || expandList.contains("applications"))) {
            for (ApplicationEntity item : entity.getApplications()) {
                Application application = ApplicationDAOJPAImpl.entity2domain(item, expandList);
                idp.getApplications().add(application);
            }
        }

        if (expandList != null && (expandList.contains("all") || expandList.contains("trusted-idps"))) {
            for (TrustedIdpEntity item : entity.getTrustedIdps()) {
                TrustedIdp trustedIdp = TrustedIdpDAOJPAImpl.entity2domain(item);
                idp.getTrustedIdps().add(trustedIdp);
            }
        }

        for (Map.Entry<String, String> item : entity.getAuthenticationURIs().entrySet()) {
            idp.getAuthenticationURIs().put(item.getKey(), item.getValue());
        }

        for (String item : entity.getTokenTypesOffered()) {
            idp.getTokenTypesOffered().add(item);
        }

        for (String item : entity.getSupportedProtocols()) {
            idp.getSupportedProtocols().add(item);
        }

        if (expandList != null && (expandList.contains("all") || expandList.contains("claims"))) {
            for (ClaimEntity item : entity.getClaimTypesOffered()) {
                idp.getClaimTypesOffered().add(ClaimDAOJPAImpl.entity2domain(item));
            }
        }

        return idp;
    }

}