public class AbstractSecuredLocalService {
    protected String getStateChecker() {
        Cookie cookie = headers.getCookies().get(KEYCLOAK_STATE_CHECKER);
        if (cookie != null) {
            stateChecker = cookie.getValue();
            String[] s = stateChecker.split("/");
            if (s.length == 2) {
                String sessionId = s[0];
                String stateChecker = s[1];

                if (auth.getSession().getId().equals(sessionId)) {
                    return stateChecker;
                }
            }
        }
        return null;
    }

    protected void updateCsrfChecks() {
        stateChecker = getStateChecker();
        if (stateChecker == null) {
            stateChecker = Base64Url.encode(KeycloakModelUtils.generateSecret());

            StringBuilder sb = new StringBuilder();
            sb.append(auth.getSession().getId());
            sb.append("/");
            sb.append(stateChecker);

            String sessionCookieValue = sb.toString();

            String cookiePath = AuthenticationManager.getAccountCookiePath(realm, uriInfo);
            boolean secureOnly = realm.getSslRequired().isRequired(clientConnection);
            CookieHelper.addCookie(KEYCLOAK_STATE_CHECKER, sessionCookieValue, cookiePath, null, null, -1, secureOnly, true);
        }
    }

    protected void csrfCheck(final MultivaluedMap<String, String> formData) {
        String stateChecker = formData.getFirst("stateChecker");
        if (stateChecker == null || !stateChecker.equals(getStateChecker())) {
            throw new ForbiddenException();
        }
    }

}