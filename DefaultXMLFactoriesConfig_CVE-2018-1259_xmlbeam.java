public class DefaultXMLFactoriesConfig {
    public NSMapping createNameSpaceMapping() {
        if (!NamespacePhilosophy.HEDONISTIC.equals(namespacePhilosophy)) {
            throw new IllegalStateException("To use a namespace mapping, you need to use the HEDONISTIC NamespacePhilosophy.");
        }
        return new NSMapping() {

            @Override
            public NSMapping add(final String prefix, final String uri) {
                if ((prefix == null) || (prefix.isEmpty())) {
                    throw new IllegalArgumentException("prefix must not be empty");
                }
                if ((uri == null) || (uri.isEmpty())) {
                    throw new IllegalArgumentException("uri must not be empty");
                }
                if (USER_DEFINED_MAPPING.containsKey(prefix) && (!uri.equals(USER_DEFINED_MAPPING.get(prefix)))) {
                    throw new IllegalArgumentException("The prefix '" + prefix + "' is bound to namespace '" + USER_DEFINED_MAPPING.get(prefix) + " already.");
                }
                USER_DEFINED_MAPPING.put(prefix, uri);
                return this;
            }

            @Override
            public NSMapping addDefaultNamespace(String uri) {
                return add("xbdefaultns", uri);
            }

        };
    }

    @Override
    public DocumentBuilder createDocumentBuilder() {
        try {
            DocumentBuilder documentBuilder = createDocumentBuilderFactory().newDocumentBuilder();
            return documentBuilder;
        } catch (ParserConfigurationException e) {
            throw new XBException("Error on creating document builder",e);
        }
    }

            @Override
            public NSMapping addDefaultNamespace(String uri) {
                return add("xbdefaultns", uri);
            }

    @Override
    public DocumentBuilderFactory createDocumentBuilderFactory() {
        DocumentBuilderFactory instance = DocumentBuilderFactory.newInstance();
        instance.setXIncludeAware(false);
        instance.setExpandEntityReferences(false);
        for (String featureDefault : FEATURE_DEFAULTS) {
            String[] featureValue = featureDefault.split("#");
            try {
                instance.setFeature(featureValue[0], Boolean.valueOf(featureValue[1]));
            } catch (ParserConfigurationException e) {
                // No worries if one feature is not supported.
            }
        }
        if (!NamespacePhilosophy.AGNOSTIC.equals(namespacePhilosophy)) {
            instance.setNamespaceAware(NamespacePhilosophy.HEDONISTIC.equals(namespacePhilosophy));
        }
        return instance;
    }

    @Override
    public Transformer createTransformer(final Document... document) {
        try {
            Transformer transformer = createTransformerFactory().newTransformer();
            if (isPrettyPrinting()) {

                // Enable some pretty printing of the resulting xml.
                transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
                transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            }
            if (isOmitXMLDeclaration()) {
                transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            }
            return transformer;
        } catch (TransformerConfigurationException e) {
            throw new XBException("Error on creating transformer",e);
        }
    }

}