public class GitServlet {
            public Object apply(WriteContext context) throws IOException, GitAPIException {
                File file = context.getFile();
                String unpackZipFlag = req.getParameter("unpackZip");
                boolean unzip = true;
                if (Strings.isNotBlank(unpackZipFlag)) {
                    String lowerFlag = unpackZipFlag.toLowerCase();
                    if (lowerFlag.startsWith("f") || lowerFlag.equals("0")) {
                        unzip = false;
                    }
                }
                List<File> uploadedFiles = null;
                try {
                    if (isFileUploadFilterConfigured() && !(file.length() <= GlobalFileUploadFilter.getMaxFileSizeAllowed(gitFileUploadFilters))) {
                        throw new FileUploadBase.FileUploadIOException(
                            new FileUploadException("File exceeds its maximum permitted size of bytes."));
                    }
                    uploadedFiles = uploadFiles(req, resp, file, gitFileUploadFilters);
                } catch (ServletException e) {
                    throw new IOException(e);
                }
                GitHelper.doUploadFiles(context, file, unzip, uploadedFiles);
                return null;
            }

    @Override
    protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {
        if (gitFacade == null) {
            throw new ServletException("No GitFacade object available!");
        }

        Params params = parsePararams(req, resp);
        if (params == null) {
            return;
        }
        String branch = params.getBranch();
        String path = params.getPath();

        WriteCallback<Object> callback = new WriteCallback<Object>() {
            @Override
            public Object apply(WriteContext context) throws IOException, GitAPIException {
                File file = context.getFile();
                String unpackZipFlag = req.getParameter("unpackZip");
                boolean unzip = true;
                if (Strings.isNotBlank(unpackZipFlag)) {
                    String lowerFlag = unpackZipFlag.toLowerCase();
                    if (lowerFlag.startsWith("f") || lowerFlag.equals("0")) {
                        unzip = false;
                    }
                }
                List<File> uploadedFiles = null;
                try {
                    if (isFileUploadFilterConfigured() && !(file.length() <= GlobalFileUploadFilter.getMaxFileSizeAllowed(gitFileUploadFilters))) {
                        throw new FileUploadBase.FileUploadIOException(
                            new FileUploadException("File exceeds its maximum permitted size of bytes."));
                    }
                    uploadedFiles = uploadFiles(req, resp, file, gitFileUploadFilters);
                } catch (ServletException e) {
                    throw new IOException(e);
                }
                GitHelper.doUploadFiles(context, file, unzip, uploadedFiles);
                return null;
            }
        };
        try {
            gitFacade.writeFile(branch, path, callback);
        } catch (GitAPIException e) {
            throw new ServletException("Failed to read file: " + path + " on branch " + branch + ". " + e, e);
        }
    }

}