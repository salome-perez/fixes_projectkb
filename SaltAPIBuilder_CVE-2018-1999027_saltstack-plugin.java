public class SaltAPIBuilder {
        @RequirePOST
        public static ListBoxModel doFillCredentialsIdItems(
                @AncestorInPath Job context,
                @QueryParameter String credentialsId,
                @QueryParameter final String servername,
                @AncestorInPath Item project) {
            project.checkPermission(Item.CONFIGURE);
            Item item = Stapler.getCurrentRequest().findAncestorObject(Item.class);
            return new StandardUsernameListBoxModel()
                    .includeAs(
                            item instanceof Queue.Task ? Tasks.getAuthenticationOf((Queue.Task)item) : ACL.SYSTEM,
                                    item,
                                    StandardUsernamePasswordCredentials.class,
                                    Collections.<DomainRequirement>emptyList()
                            );
        }

        @RequirePOST
        public static FormValidation doTestConnection(
                @QueryParameter String servername,
                @QueryParameter String credentialsId,
                @QueryParameter String authtype,
                @AncestorInPath Item project) {
            project.checkPermission(Item.CONFIGURE);
            StandardUsernamePasswordCredentials usedCredential = null;
            for (StandardUsernamePasswordCredentials c : CredentialsProvider.lookupCredentials(
                    StandardUsernamePasswordCredentials.class,
                    project,
                    null,
                    Collections.<DomainRequirement>emptyList())) {
                if (c.getId().equals(credentialsId)) {
                    usedCredential = c;
                    break;
                }
            }

            if (usedCredential == null) {
                return FormValidation.error("CredentialId error: no credential found with given ID.");
            }

            Jenkins jenkins = Jenkins.getInstance();
            if (jenkins == null) {
                throw new IllegalStateException("Jenkins has not been started, or was already shut down");
            }
            Launcher launcher = jenkins.createLauncher(TaskListener.NULL);

            if (!servername.matches("\\{\\{\\w+\\}\\}")) {
                JSONObject auth = Utils.createAuthArray(usedCredential, authtype);
                try {
                    String token = Utils.getToken(launcher, servername, auth).getToken();
                    if (token.contains("Error")) {
                        return FormValidation.error("Client error: " + token);
                    }
                } catch (InterruptedException|IOException e) {
                    return FormValidation.error("Error: Exception running http request");
                }

                return FormValidation.ok("Success");
            }

            return FormValidation.warning("Cannot expand parametrized server name.");
        }

        @RequirePOST
        public static FormValidation doCheckCredentialsId(
                @AncestorInPath Item project,
                @QueryParameter String value) {
            project.checkPermission(Item.CONFIGURE);
            if (project == null || !project.hasPermission(Item.CONFIGURE)) {
                return FormValidation.ok();
            }

            if (value == null) {
                return FormValidation.ok();
            }

            Item item = Stapler.getCurrentRequest().findAncestorObject(Item.class);
            for (ListBoxModel.Option o : CredentialsProvider.listCredentials(
                    StandardUsernamePasswordCredentials.class,
                    project,
                    item instanceof Queue.Task ? Tasks.getAuthenticationOf((Queue.Task)item) : ACL.SYSTEM,
                            Collections.<DomainRequirement>emptyList(),
                            CredentialsMatchers
                            .instanceOf(StandardUsernamePasswordCredentials.class))) {
                if (value.equals(o.value)) {
                    return FormValidation.ok();
                }
            }
            return FormValidation.error("Cannot find any credentials with id " + value);
        }

}