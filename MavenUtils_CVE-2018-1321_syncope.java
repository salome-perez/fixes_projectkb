public class MavenUtils {
    public static File createSettingsWithProxy(final String path, final String proxyHost, final String proxyPort,
            final String proxyUser, final String proxyPassword) throws Exception {

        final File settingsXML = new File(System.getProperty(MAVEN_HOME_PROPERTY) + (System.getProperty(
                MAVEN_HOME_PROPERTY).endsWith("/") ? "conf/settings.xml" : "/conf/settings.xml"));
        final File tempSettingsXML = new File(path + (path.endsWith("/") ? "settings_temp.xml" : "/settings_temp.xml"));
        if (settingsXML.canRead() && !tempSettingsXML.exists()) {
            tempSettingsXML.createNewFile();

            DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();
            DOMImplementationLS domImpl = (DOMImplementationLS) reg.getDOMImplementation("LS");
            LSInput lsinput = domImpl.createLSInput();
            lsinput.setByteStream(new FileInputStream(settingsXML));
            LSParser parser = domImpl.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, null);
            // parse settings.xml
            final Document settings = parser.parse(lsinput);

            final Element proxies = (Element) settings.getDocumentElement().getElementsByTagName("proxies").item(0);

            final Element proxy = settings.createElement("proxy");

            final Element id = settings.createElement("id");
            final Element active = settings.createElement("active");
            final Element protocol = settings.createElement("protocol");
            final Element host = settings.createElement("host");
            final Element port = settings.createElement("port");
            final Element nonProxyHosts = settings.createElement("nonProxyHosts");
            id.appendChild(settings.createTextNode("optional"));
            active.appendChild(settings.createTextNode("true"));
            protocol.appendChild(settings.createTextNode("http"));
            host.appendChild(settings.createTextNode(proxyHost));
            port.appendChild(settings.createTextNode(proxyPort));
            proxy.appendChild(id);
            proxy.appendChild(active);
            proxy.appendChild(protocol);
            // create username and password tags only if required
            if (proxyUser != null && !proxyUser.isEmpty() && proxyPassword != null) {
                final Element username = settings.createElement("username");
                final Element password = settings.createElement("password");
                username.appendChild(settings.createTextNode(proxyUser));
                password.appendChild(settings.createTextNode(proxyPassword));
                proxy.appendChild(username);
                proxy.appendChild(password);
            }
            proxy.appendChild(host);
            proxy.appendChild(port);
            proxy.appendChild(nonProxyHosts);

            proxies.appendChild(proxy);

            FileSystemUtils.writeXML(settings, Files.newOutputStream(tempSettingsXML.toPath()));

        }
        return tempSettingsXML;
    }

}