public class ImplicitCollectionMapper {
        public void add(ImplicitCollectionMappingImpl def) {
            fieldNameToDef.put(def.getFieldName(), def);
            namedItemTypeToDef.put(def.createNamedItemType(), def);
            if (def.getItemFieldName() != null) {
                itemFieldNameToDef.put(def.getItemFieldName(), def);
            }
        }

    private ImplicitCollectionMapperForClass getMapper(final Class declaredFor, final String fieldName) {
        Class definedIn = declaredFor;
        while (definedIn != null) {
            ImplicitCollectionMapperForClass mapper = (ImplicitCollectionMapperForClass)classNameToMapper
                .get(definedIn);
            if (mapper != null) {
                return mapper;
            } else { 
                if (fieldName != null) {
                    try {
                        // do not continue search for a hidden field
                        final Field field = definedIn.getDeclaredField(fieldName);
                        if (field != null && !Modifier.isStatic(field.getModifiers())) {
                            return null;
                        }
                    } catch (final SecurityException e) {
                        throw new InitializationException("Access denied for field with implicit collection", e);
                    } catch (final NoSuchFieldException e) {
                        // OK, we can continue the search in the class hierarchy
                    }
                }
            }
            definedIn = definedIn.getSuperclass();
        }
        return null;
    }

}