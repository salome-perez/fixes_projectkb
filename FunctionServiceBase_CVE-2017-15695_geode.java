public class FunctionServiceBase {
  @Test
  public void customCollectorDoesNotSeeExceptionFunctionThrowsIllegalState() {
    // GEODE-1762 - clients throw from execute, but peers throw from rc.getResult
    IgnoredException.addIgnoredException("java.lang.IllegalStateException");
    try {
      ResultCollector rc = getExecution().withCollector(customCollector).execute((context) -> {
        throw new IllegalStateException();
      });
      rc.getResult();
      fail("should have received an exception");
    } catch (FunctionException expected) {
    }

    Assert.assertEquals(0, customCollector.getResult().size());
  }

  @Test
  public void defaultCollectorThrowsExceptionAfterFunctionReturnsFunctionException() {
    // GEODE-1762 - clients throw from execute, but peers throw from rc.getResult
    thrown.expect(FunctionException.class);
    thrown.expectCause(is((Throwable) null));
    ResultCollector rc = getExecution().execute((context) -> {
      context.getResultSender().lastResult(new FunctionException());
    });
    final Object result = rc.getResult();
  }

  @Test
  public void defaultCollectorThrowsExceptionAfterFunctionReturnsIllegalStateExceptionAsIntermediateResult() {
    // GEODE-1762 - clients throw from execute, but peers throw from rc.getResult
    // GEODE-1762 - client throws a ServerOperationException
    thrown.expect(Exception.class);
    // thrown.expect(FunctionException.class);
    // thrown.expectCause(isA(IllegalStateException.class));
    ResultCollector rc = getExecution().execute((context) -> {
      context.getResultSender().sendResult(new IllegalStateException());
      context.getResultSender().lastResult("done");
    });
    final Object result = rc.getResult();
  }

  @Test()
  public void defaultCollectorThrowsExceptionAfterFunctionThrowsIllegalState() {
    IgnoredException.addIgnoredException("java.lang.IllegalStateException");
    // GEODE-1762 - clients throw from execute, but peers throw from rc.getResult
    thrown.expect(FunctionException.class);
    // GEODE-1762 - clients wrap cause in a ServerOperationException
    // thrown.expectCause(isA(IllegalStateException.class));
    ResultCollector rc = getExecution().execute((context) -> {
      throw new IllegalStateException();
    });
    final Object result = rc.getResult();
  }

  @Test
  public void defaultCollectorThrowsExceptionAfterFunctionReturnsFunctionExceptionAsIntermediateResult() {
    // GEODE-1762 - clients throw from execute, but peers throw from rc.getResult
    thrown.expect(FunctionException.class);
    thrown.expectCause(is((Throwable) null));
    ResultCollector rc = getExecution().execute((context) -> {
      context.getResultSender().sendResult(new FunctionException());
      context.getResultSender().lastResult("done");
    });
    final Object result = rc.getResult();
  }

}