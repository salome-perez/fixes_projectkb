public class AddDynamicPartitions {
    public void write(org.apache.thrift.protocol.TProtocol prot, AddDynamicPartitions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.txnid);
      oprot.writeI64(struct.writeid);
      oprot.writeString(struct.dbname);
      oprot.writeString(struct.tablename);
      {
        oprot.writeI32(struct.partitionnames.size());
        for (String _iter656 : struct.partitionnames)
        {
          oprot.writeString(_iter656);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetOperationType()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetOperationType()) {
        oprot.writeI32(struct.operationType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AddDynamicPartitions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.txnid = iprot.readI64();
      struct.setTxnidIsSet(true);
      struct.writeid = iprot.readI64();
      struct.setWriteidIsSet(true);
      struct.dbname = iprot.readString();
      struct.setDbnameIsSet(true);
      struct.tablename = iprot.readString();
      struct.setTablenameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list657 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.partitionnames = new ArrayList<String>(_list657.size);
        String _elem658;
        for (int _i659 = 0; _i659 < _list657.size; ++_i659)
        {
          _elem658 = iprot.readString();
          struct.partitionnames.add(_elem658);
        }
      }
      struct.setPartitionnamesIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.operationType = org.apache.hadoop.hive.metastore.api.DataOperationType.findByValue(iprot.readI32());
        struct.setOperationTypeIsSet(true);
      }
    }

}