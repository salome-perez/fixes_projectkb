public class SolrResourceLoader {
    @Override
    public InputStream openResource(String resource) throws IOException {
      InputStream is=null;
      try {
        File f0 = new File(resource), f = f0;
        if (!f.isAbsolute()) {
          // try $CWD/$configDir/$resource
          f = new File(getConfigDir() + resource).getAbsoluteFile();
        }
        boolean found = f.isFile() && f.canRead();
        if (!found) { // no success with $CWD/$configDir/$resource
          f = f0.getAbsoluteFile();
          found = f.isFile() && f.canRead();
        }
        // check that we don't escape instance dir
        if (found) {
          if (!Boolean.parseBoolean(System.getProperty("solr.allow.unsafe.resourceloading", "false"))) {
            final URI instanceURI = new File(getInstanceDir()).getAbsoluteFile().toURI().normalize();
            final URI fileURI = f.toURI().normalize();
            if (instanceURI.relativize(fileURI) == fileURI) {
              // no URI relativize possible, so they don't share same base folder
              throw new IOException("For security reasons, SolrResourceLoader cannot load files from outside the instance's directory: " + f +
                  "; if you want to override this safety feature and you are sure about the consequences, you can pass the system property "+
                  "-Dsolr.allow.unsafe.resourceloading=true to your JVM");
            }
          }
          // relativize() returned a relative, new URI, so we are fine!
          return new FileInputStream(f);
        }
        // Delegate to the class loader (looking into $INSTANCE_DIR/lib jars).
        // We need a ClassLoader-compatible (forward-slashes) path here!
        is = classLoader.getResourceAsStream(resource.replace(File.separatorChar, '/'));
        // This is a hack just for tests (it is not done in ZKResourceLoader)!
        // -> the getConfigDir's path must not be absolute!
        if (is == null && System.getProperty("jetty.testMode") != null && !new File(getConfigDir()).isAbsolute()) {
          is = classLoader.getResourceAsStream((getConfigDir() + resource).replace(File.separatorChar, '/'));
        }
      } catch (IOException ioe) {
        throw ioe;
      } catch (Exception e) {
        throw new IOException("Error opening " + resource, e);
      }
      if (is==null) {
        throw new IOException("Can't find resource '" + resource + "' in classpath or '" + new File(getConfigDir()).getAbsolutePath() + "'");
      }
      return is;
    }

    public String getConfigDir() {
        return instanceDir + "conf" + File.separator;
    }
}