public class URLValidator {
    public String getUrlRegex() {
        return getUrlPattern().pattern();
    }

    public void setUrlRegex(String urlRegex) {
        urlPattern = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);
    }

    protected Pattern getUrlPattern() {
        if (StringUtils.isNotEmpty(urlRegexExpression)) {
            String regex = (String) parse(urlRegexExpression, String.class);
            if (regex == null) {
                LOG.warn("Provided URL Regex expression [{}] was evaluated to null! Falling back to default!", urlRegexExpression);
                urlPattern = Pattern.compile(DEFAULT_URL_REGEX, Pattern.CASE_INSENSITIVE);
            } else {
                urlPattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);
            }
        }
        return urlPattern;
    }

    public void validate(Object object) throws ValidationException {
        String fieldName = getFieldName();
        Object value = this.getFieldValue(fieldName, object);

        // if there is no value - don't do comparison
        // if a value is required, a required validator should be added to the field
        if (value == null || value.toString().length() == 0) {
            return;
        }

        String stringValue = String.valueOf(value).trim();

        if (!(value.getClass().equals(String.class)) || !getUrlPattern().matcher(stringValue).matches()) {
            addFieldError(fieldName, object);
        }
    }

}