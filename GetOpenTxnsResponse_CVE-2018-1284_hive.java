public class GetOpenTxnsResponse {
    public void write(org.apache.thrift.protocol.TProtocol prot, GetOpenTxnsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.txn_high_water_mark);
      {
        oprot.writeI32(struct.open_txns.size());
        for (long _iter542 : struct.open_txns)
        {
          oprot.writeI64(_iter542);
        }
      }
      oprot.writeBinary(struct.abortedBits);
      BitSet optionals = new BitSet();
      if (struct.isSetMin_open_txn()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetMin_open_txn()) {
        oprot.writeI64(struct.min_open_txn);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetOpenTxnsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.txn_high_water_mark = iprot.readI64();
      struct.setTxn_high_water_markIsSet(true);
      {
        org.apache.thrift.protocol.TList _list543 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.open_txns = new ArrayList<Long>(_list543.size);
        long _elem544;
        for (int _i545 = 0; _i545 < _list543.size; ++_i545)
        {
          _elem544 = iprot.readI64();
          struct.open_txns.add(_elem544);
        }
      }
      struct.setOpen_txnsIsSet(true);
      struct.abortedBits = iprot.readBinary();
      struct.setAbortedBitsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.min_open_txn = iprot.readI64();
        struct.setMin_open_txnIsSet(true);
      }
    }

}