public class FileSystemUtils {
    public void exec(final String cmd, final String path) {
        try {
            handler.logOutput("Executing " + cmd, true);
            final ProcessBuilder builder = new ProcessBuilder(cmd.split(" "));
            if (path != null && !path.isEmpty()) {
                builder.directory(new File(path));
            }
            final Process process = builder.start();
            readResponse(process.getInputStream());
        } catch (final IOException ex) {
            final String errorMessage = "Error executing " + cmd + ": " + ex.getMessage();
            handler.emitError(errorMessage, errorMessage);
            InstallLog.getInstance().error(errorMessage);
        }
    }

    public void writeToFile(final File file, final String content) {
        try {
            final FileWriter fw = new FileWriter(file.getAbsoluteFile());
            try (BufferedWriter bw = new BufferedWriter(fw)) {
                bw.write(content);
            }
        } catch (final IOException ex) {
            final String errorMessage = "Error writing file " + file.getAbsolutePath() + ": " + ex.getMessage();
            handler.emitError(errorMessage, errorMessage);
            InstallLog.getInstance().error(errorMessage);
        }
    }

    public void copyFile(final String sourceFilePath, final String targetFilePath) {
        try {
            FileUtils.copyFile(new File(sourceFilePath), new File(targetFilePath));
        } catch (final IOException ex) {
            final String errorMessage =
                    "Error copying file " + sourceFilePath + " to " + targetFilePath + ": " + ex.getMessage();
            handler.emitError(errorMessage, errorMessage);
            InstallLog.getInstance().error(errorMessage);
        }
    }

    public static void writeXML(final Document doc, final OutputStream out) throws IOException, TransformerException {
        final TransformerFactory factory = TransformerFactory.newInstance();
        factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
        final Transformer transformer = factory.newTransformer();
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
        transformer.setOutputProperty(OutputKeys.METHOD, "xml");
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
        transformer.transform(new DOMSource(doc),
                new StreamResult(new OutputStreamWriter(out, Charset.forName("UTF-8"))));
        out.close();
    }

    public void copyFileFromResources(
            final String filePath, final String destination, final AbstractUIProcessHandler handler) {

        try {
            FileUtils.copyURLToFile(getClass().getResource(filePath), new File(destination));
        } catch (IOException ex) {
            String errorMessage = "Error copying file " + filePath + " to + " + destination + ": " + ex.getMessage();
            handler.emitError(errorMessage, errorMessage);
            InstallLog.getInstance().error(errorMessage);
        }
    }

    public void createDirectory(final String directoryPath) {
        final File directory = new File(directoryPath);
        if (!directory.exists()) {
            directory.mkdirs();
        }
    }

    public void appendToFile(final File file, final String content) {
        try {
            if (!file.exists()) {
                file.createNewFile();
            }
            try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(file, true)))) {
                out.println(content);
            }
        } catch (IOException ex) {
            final String errorMessage = "Error writing file " + file.getAbsolutePath() + ": " + ex.getMessage();
            handler.emitError(errorMessage, errorMessage);
            InstallLog.getInstance().error(errorMessage);
        }
    }

}