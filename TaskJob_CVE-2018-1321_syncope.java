public class TaskJob {
    @Override
    public void execute(final JobExecutionContext context) throws JobExecutionException {
        try {
            AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),
                    new AuthContextUtils.Executable<Void>() {

                @Override
                public Void exec() {
                    try {
                        Class<?> delegateClass =
                                ClassUtils.getClass(context.getMergedJobDataMap().getString(DELEGATE_CLASS_KEY));

                        delegate = ((SchedTaskJobDelegate) ApplicationContextProvider.getBeanFactory().
                                createBean(delegateClass, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false));
                        delegate.execute(
                                taskKey,
                                context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY),
                                context);
                    } catch (Exception e) {
                        LOG.error("While executing task {}", taskKey, e);
                        throw new RuntimeException(e);
                    }

                    return null;
                }
            });
        } catch (RuntimeException e) {
            LOG.error("While executing task {}", taskKey, e);
            throw new JobExecutionException("While executing task " + taskKey, e);
        }
    }

}