public class IOHelper {
    public static Document getDocumentFromURL(final DocumentBuilder documentBuilder, final String url, final Map<String, String> requestProperties, final Class<?>... resourceAwareClasses) throws IOException {
        try {
            for (String resProto : RESOURCE_PROTO_NAMES) {
                if (url.startsWith(resProto)) {
                    final String resourceName = url.substring(resProto.length());
                    InputStream is = null;
                    // If possible use class loader of given classes.
                    if (resourceAwareClasses != null) {
                        for (Class<?> clazz : resourceAwareClasses) {
                            if (clazz == null) {
                                continue;
                            }
                            is = clazz.getResourceAsStream(resourceName);
                            if (is != null) {
                                break;
                            }
                        }
                    }

                    // Fallback to context class loader
                    if (is == null) {
                        is = Thread.currentThread().getContextClassLoader().getResourceAsStream(resourceName);
                    }

                    if (is == null) {
                        throw new IOException("The resource '" + url + "' could not be found");
                    }
                    InputSource source = new InputSource(is);
                    // source.setEncoding("MacRoman");
                    return documentBuilder.parse(source);
                }
            }
            if (url.startsWith("http:") || url.startsWith("https:")) {
                return documentBuilder.parse(IOHelper.httpGet(url, requestProperties), url);
            }
            Document document = documentBuilder.parse(url);
            if (document == null) {
                throw new IOException("Document could not be created form uri " + url);
            }
            return document;
        } catch (SAXException e) {
            throw new XBDocumentParsingException(e);
        }
    }

    public static Document loadDocument(final XBProjector projector, final InputStream is) {
        final DocumentBuilder documentBuilder = projector.config().createDocumentBuilder();
        try {
            return documentBuilder.parse(is, "");
        } catch (SAXException e) {
            throw new XBDocumentParsingException(e);
        } catch (IOException e) {
            throw new XBIOException("Error during document loading",e);
        }
    }

    @SuppressWarnings({ "unchecked", "resource" }

}