public class DefaultActionMapper {
    public void handleSpecialParameters(HttpServletRequest request, ActionMapping mapping) {
        // handle special parameter prefixes.
        Set<String> uniqueParameters = new HashSet<String>();
        Map parameterMap = request.getParameterMap();
        for (Object o : parameterMap.keySet()) {
            String key = (String) o;

            // Strip off the image button location info, if found
            if (key.endsWith(".x") || key.endsWith(".y")) {
                key = key.substring(0, key.length() - 2);
            }

            // Ensure a parameter doesn't get processed twice
            if (!uniqueParameters.contains(key)) {
                ParameterAction parameterAction = (ParameterAction) prefixTrie.get(key);
                if (parameterAction != null) {
                    parameterAction.execute(key, mapping, request);
                    uniqueParameters.add(key);
                    break;
                }
            }
        }
    }

                    public void execute(final String key, ActionMapping mapping, HttpServletRequest request) {
                        if (request != null && request.getAttribute(STRUTS2_ACTION_PREFIX_PARSED) == null) {
                            request.setAttribute(STRUTS2_ACTION_PREFIX_PARSED, true);
                            String name = key.substring(ACTION_PREFIX.length());
                            if (allowDynamicMethodCalls) {
                                int bang = name.indexOf('!');
                                if (bang != -1) {
                                    String method = name.substring(bang + 1);
                                    mapping.setMethod(method);
                                    name = name.substring(0, bang);
                                }
                            }
                            String actionName = cleanupActionName(name);
                            mapping.setName(actionName);
                            if (getDefaultExtension() != null) {
                                actionName = actionName + "." + getDefaultExtension();
                            }
                            mapping.setResult(new ServletDispatcherResult(actionName));
                        }
                    }

    @Inject(StrutsConstants.STRUTS_ENABLE_DYNAMIC_METHOD_INVOCATION)
    public void setAllowDynamicMethodCalls(String allow) {
        allowDynamicMethodCalls = "true".equalsIgnoreCase(allow);
    }

}