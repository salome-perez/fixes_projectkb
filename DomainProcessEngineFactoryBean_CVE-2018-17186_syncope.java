public class DomainProcessEngineFactoryBean {
    @Override
    public DomainProcessEngine getObject() throws Exception {
        if (engine == null) {
            Map<String, ProcessEngine> engines = new HashMap<>();

            ctx.getBeansOfType(DataSource.class).forEach((key, dataSource) -> {
                if (!key.startsWith("local")) {
                    String domain = StringUtils.substringBefore(key, DataSource.class.getSimpleName());
                    PlatformTransactionManager transactionManager = ctx.getBean(
                            domain + "TransactionManager", PlatformTransactionManager.class);
                    Object entityManagerFactory = ctx.getBean(domain + "EntityManagerFactory");

                    DomainProcessEngineConfiguration conf = ctx.getBean(DomainProcessEngineConfiguration.class);
                    conf.setDataSource(dataSource);
                    conf.setTransactionManager(transactionManager);
                    conf.setTransactionsExternallyManaged(true);
                    conf.setJpaEntityManagerFactory(entityManagerFactory);
                    if (conf.getBeans() == null) {
                        conf.setBeans(new SpringBeanFactoryProxyMap(ctx));
                    }
                    if (conf.getExpressionManager() == null) {
                        conf.setExpressionManager(new SpringExpressionManager(ctx, conf.getBeans()));
                    }
                    if (EngineServiceUtil.getIdmEngineConfiguration(conf) == null) {
                        conf.addEngineConfiguration(
                                EngineConfigurationConstants.KEY_IDM_ENGINE_CONFIG,
                                ctx.getBean(SpringIdmEngineConfiguration.class));
                    }
                    conf.setEnableSafeBpmnXml(true);
                    conf.setCustomFormTypes(Arrays.asList(new DropdownFormType(null)));

                    engines.put(domain, conf.buildProcessEngine());
                }
            });

            engine = new DomainProcessEngine(engines);
        }

        return engine;
    }

}