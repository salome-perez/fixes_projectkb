public class Configuration {
  public long getExecutionCommandsCacheSize() {
    String stringValue = properties.getProperty(SERVER_EC_CACHE_SIZE);
    long value = SERVER_EC_CACHE_SIZE_DEFAULT;
    if (stringValue != null) {
      try {
        value = Long.valueOf(stringValue);
      } catch (NumberFormatException ignored) {
      }

    }

    return value;
  }

  public void setLdap(String host, String userClass, String userNameAttr, String groupClass, String groupName, String groupMember,
      String baseDN, boolean anon, String managerDN, String managerPass) {
    properties.setProperty(LDAP_PRIMARY_URL_KEY, host);
    properties.setProperty(LDAP_USER_OBJECT_CLASS_KEY, userClass);
    properties.setProperty(LDAP_USERNAME_ATTRIBUTE_KEY, userNameAttr);
    properties.setProperty(LDAP_GROUP_OBJECT_CLASS_KEY, groupClass);
    properties.setProperty(LDAP_GROUP_NAMING_ATTR_KEY, groupName);
    properties.setProperty(LDAP_GROUP_MEMEBERSHIP_ATTR_KEY, groupMember);
    properties.setProperty(LDAP_BASE_DN_KEY, baseDN);
    properties.setProperty(LDAP_BIND_ANONYMOUSLY_KEY, String.valueOf(anon));
    properties.setProperty(LDAP_MANAGER_DN_KEY, managerDN);
    properties.setProperty(LDAP_MANAGER_PASSWORD_KEY, managerPass);
  }

  public String getProperty(String key) {
    return properties.getProperty(key);
  }

  private synchronized void loadCredentialProvider() {
    if (!credentialProviderInitialized) {
      try {
        credentialProvider = new CredentialProvider(null,
          getMasterKeyLocation(), isMasterKeyPersisted());
      } catch (Exception e) {
        LOG.info("Credential provider creation failed. Reason: " + e.getMessage());
        if (LOG.isDebugEnabled()) {
          e.printStackTrace();
        }
        credentialProvider = null;
      }
      credentialProviderInitialized = true;
    }
  }

  private static Properties readConfigFile() {
    Properties properties = new Properties();

    //Get property file stream from classpath
    InputStream inputStream = Configuration.class.getClassLoader().getResourceAsStream(CONFIG_FILE);

    if (inputStream == null) {
      throw new RuntimeException(CONFIG_FILE + " not found in classpath");
    }

    // load the properties
    try {
      properties.load(inputStream);
      inputStream.close();
    } catch (FileNotFoundException fnf) {
      LOG.info("No configuration file " + CONFIG_FILE + " found in classpath.", fnf);
    } catch (IOException ie) {
      throw new IllegalArgumentException("Can't read configuration file " +
          CONFIG_FILE, ie);
    }

    return properties;
  }

  public void setProperty(String key, String value) {
    if (null == value) {
      properties.remove(key);
    } else {
      properties.setProperty(key, value);
    }
  }

  public String getDefaultAgentTaskTimeout(boolean isPackageInstallationTask) {
    String key = isPackageInstallationTask ? AGENT_PACKAGE_INSTALL_TASK_TIMEOUT_KEY : AGENT_TASK_TIMEOUT_KEY;
    String defaultValue = isPackageInstallationTask ? AGENT_PACKAGE_INSTALL_TASK_TIMEOUT_DEFAULT : AGENT_TASK_TIMEOUT_DEFAULT;
    String value = properties.getProperty(key, defaultValue);
    if (StringUtils.isNumeric(value)) {
      return value;
    } else {
      LOG.warn(String.format("Value of %s (%s) should be a number, " +
          "falling back to default value (%s)",
          key, value, defaultValue));
      return defaultValue;
    }
  }

  public String getMasterHostname(String defaultValue) {
    return properties.getProperty(BOOTSTRAP_MASTER_HOSTNAME, defaultValue);
  }

}