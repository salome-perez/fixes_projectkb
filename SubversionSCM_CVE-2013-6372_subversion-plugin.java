public class SubversionSCM {
    public PasswordCredential(String userName, String password) {
        this.userName = userName;
        this.password = Secret.fromString(Scrambler.scramble(password));
    }

    @Override
    public SVNAuthentication createSVNAuthentication(String kind) {
        if(kind.equals(ISVNAuthenticationManager.SSH))
            return new SVNSSHAuthentication(userName, getPassword(),-1,false);
        else
            return new SVNPasswordAuthentication(userName, getPassword(),false);
    }
    private String getPassword() {
        return Scrambler.descramble(Secret.toString(password));
    }
    public SslClientCertificateCredential(File certificate, String password) throws IOException {
        this.password = Secret.fromString(Scrambler.scramble(password));
        this.certificate = Secret.fromString(new String(Base64.encode(FileUtils.readFileToByteArray(certificate))));
    }
    public SshPublicKeyCredential(String userName, String passphrase, File keyFile) throws SVNException {
        this.userName = userName;
        this.passphrase = Secret.fromString(Scrambler.scramble(passphrase));

        Random r = new Random();
        StringBuilder buf = new StringBuilder();
        for(int i=0;i<16;i++)
            buf.append(Integer.toHexString(r.nextInt(16)));
        this.id = buf.toString();

        try {
            File savedKeyFile = getKeyFile();
            FileUtils.copyFile(keyFile,savedKeyFile);
            setFilePermissions(savedKeyFile, "600");
        } catch (IOException e) {
            throw new SVNException(
                    SVNErrorMessage.create(SVNErrorCode.AUTHN_CREDS_UNAVAILABLE,"Unable to save private key").initCause(e));
        }
    }
}