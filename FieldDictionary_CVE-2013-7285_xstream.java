public class FieldDictionary {
    private Map buildMap(final Class type, boolean tupleKeyed) {
        Class cls = type;
        synchronized (this) {
            if (!keyedByFieldNameCache.containsKey(type)) {
                final List superClasses = new ArrayList();
                while (!Object.class.equals(cls) && cls != null) {
                    superClasses.add(0, cls);
                    cls = cls.getSuperclass();
                }
                Map lastKeyedByFieldName = Collections.EMPTY_MAP;
                Map lastKeyedByFieldKey = Collections.EMPTY_MAP;
                for (final Iterator iter = superClasses.iterator(); iter.hasNext();) {
                    cls = (Class)iter.next();
                    if (!keyedByFieldNameCache.containsKey(cls)) {
                        final Map keyedByFieldName = new HashMap(lastKeyedByFieldName);
                        final Map keyedByFieldKey = new OrderRetainingMap(lastKeyedByFieldKey);
                        Field[] fields = cls.getDeclaredFields();
                        if (JVM.reverseFieldDefinition()) {
                            for (int i = fields.length >> 1; i-- > 0;) {
                                final int idx = fields.length - i - 1;
                                final Field field = fields[i];
                                fields[i] = fields[idx];
                                fields[idx] = field;
                            }
                        }
                        for (int i = 0; i < fields.length; i++ ) {
                            Field field = fields[i];
                            if (!field.isAccessible()) {
                                field.setAccessible(true);
                            }
                            FieldKey fieldKey = new FieldKey(
                                field.getName(), field.getDeclaringClass(), i);
                            Field existent = (Field)keyedByFieldName.get(field.getName());
                            if (existent == null
                            // do overwrite statics
                                || ((existent.getModifiers() & Modifier.STATIC) != 0)
                                // overwrite non-statics with non-statics only
                                || (existent != null && ((field.getModifiers() & Modifier.STATIC) == 0))) {
                                keyedByFieldName.put(field.getName(), field);
                            }
                            keyedByFieldKey.put(fieldKey, field);
                        }
                        final Map sortedFieldKeys = sorter.sort(cls, keyedByFieldKey);
                        keyedByFieldNameCache.put(cls, keyedByFieldName);
                        keyedByFieldKeyCache.put(cls, sortedFieldKeys);
                        lastKeyedByFieldName = keyedByFieldName;
                        lastKeyedByFieldKey = sortedFieldKeys;
                    } else {
                        lastKeyedByFieldName = (Map)keyedByFieldNameCache.get(cls);
                        lastKeyedByFieldKey = (Map)keyedByFieldKeyCache.get(cls);
                    }
                }
                return tupleKeyed ? lastKeyedByFieldKey : lastKeyedByFieldName;
            }
        }
        return (Map)(tupleKeyed
                ? keyedByFieldKeyCache.get(type)
                : keyedByFieldNameCache.get(type));
    }

}