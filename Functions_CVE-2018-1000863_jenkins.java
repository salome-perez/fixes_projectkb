public class Functions {
    public static String jsStringEscape(String s) {
        if (s == null) return null;
        StringBuilder buf = new StringBuilder();
        for( int i=0; i<s.length(); i++ ) {
            char ch = s.charAt(i);
            switch(ch) {
            case '\'':
                buf.append("\\'");
                break;
            case '\\':
                buf.append("\\\\");
                break;
            case '"':
                buf.append("\\\"");
                break;
            default:
                buf.append(ch);
            }
        }
        return buf.toString();
    }
    public static boolean isAnonymous() {
        return ACL.isAnonymous(Jenkins.getAuthentication());
    }
    @Nullable
    public static String getRelativeNameFrom(@CheckForNull Item p, @CheckForNull ItemGroup g, boolean useDisplayName) {
        if (p == null) return null;
        if (g == null) return useDisplayName ? p.getFullDisplayName() : p.getFullName();
        String separationString = useDisplayName ? " Â» " : "/";
        
        // first list up all the parents
        Map<ItemGroup,Integer> parents = new HashMap<ItemGroup,Integer>();
        int depth=0;
        while (g!=null) {
            parents.put(g, depth++);
            if (g instanceof Item)
                g = ((Item)g).getParent();
            else
                g = null;
        }

        StringBuilder buf = new StringBuilder();
        Item i=p;
        while (true) {
            if (buf.length()>0) buf.insert(0,separationString);
            buf.insert(0,useDisplayName ? i.getDisplayName() : i.getName());
            ItemGroup gr = i.getParent();

            Integer d = parents.get(gr);
            if (d!=null) {
                for (int j=d; j>0; j--) {
                    buf.insert(0,separationString);
                    buf.insert(0,"..");
                }
                return buf.toString();
            }

            if (gr instanceof Item)
                i = (Item)gr;
            else // Parent is a group, but not an item
                return null;
        }
    }
    @Nullable
    public static String getRelativeDisplayNameFrom(@CheckForNull Item p, @CheckForNull ItemGroup g) {
        return getRelativeNameFrom(p, g, true);
    }
    public static List<TopLevelItem> getAllTopLevelItems(ItemGroup root) {
        return root.getAllItems(TopLevelItem.class);
      }     
}