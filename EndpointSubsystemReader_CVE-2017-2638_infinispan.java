public class EndpointSubsystemReader {
   private void parseRestConnector(XMLExtendedStreamReader reader, PathAddress subsystemAddress,
         List<ModelNode> operations) throws XMLStreamException {

      ModelNode connector = Util.getEmptyOperation(ADD, null);
      String name = ModelKeys.REST_CONNECTOR;

      for (int i = 0; i < reader.getAttributeCount(); i++) {
         ParseUtils.requireNoNamespaceAttribute(reader, i);
         String value = reader.getAttributeValue(i);
         Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));
         switch (attribute) {
         case SOCKET_BINDING: {
            RestConnectorResource.SOCKET_BINDING.parseAndSetParameter(value, connector, reader);
            break;
         }
         case AUTH_METHOD: {
            if (namespace.since(Namespace.INFINISPAN_ENDPOINT_9_0)) {
               throw ParseUtils.unexpectedAttribute(reader, i);
            } else {
               ROOT_LOGGER.restAuthMethodIgnored();
            }
            break;
         }
         case CACHE_CONTAINER: {
            CommonConnectorResource.CACHE_CONTAINER.parseAndSetParameter(value, connector, reader);
            break;
         }
         case CONTEXT_PATH: {
            RestConnectorResource.CONTEXT_PATH.parseAndSetParameter(value, connector, reader);
            break;
         }
         case EXTENDED_HEADERS: {
            RestConnectorResource.EXTENDED_HEADERS.parseAndSetParameter(value, connector, reader);
            break;
         }
         case NAME: {
            CommonConnectorResource.NAME.parseAndSetParameter(value, connector, reader);
            name = value;
            break;
         }
         case SECURITY_DOMAIN: {
            if (namespace.since(Namespace.INFINISPAN_ENDPOINT_9_0)) {
               throw ParseUtils.unexpectedAttribute(reader, i);
            } else {
               ROOT_LOGGER.restSecurityDomainIgnored();
            }
         }
         case SECURITY_MODE: {
            if (namespace.since(Namespace.INFINISPAN_ENDPOINT_9_0)) {
               throw ParseUtils.unexpectedAttribute(reader, i);
            } else {
               ROOT_LOGGER.restSecurityModeIgnored();
            }
            break;
         }
         case SECURITY_REALM: {
            if (namespace.since(Namespace.INFINISPAN_ENDPOINT_9_0)) {
               throw ParseUtils.unexpectedAttribute(reader, i);
            } else {
               ROOT_LOGGER.restSecurityRealmIgnored();
            }
            break;
         }
         case VIRTUAL_HOST: {
            if (namespace.since(Namespace.INFINISPAN_ENDPOINT_9_0)) {
               throw ParseUtils.unexpectedAttribute(reader, i);
            } else {
               ROOT_LOGGER.virtualHostNotInUse();
            }
            break;
         }
         case IGNORED_CACHES: {
            if (namespace.since(Namespace.INFINISPAN_ENDPOINT_8_0)) {
               reader.getListAttributeValue(i).forEach(a -> connector.get(ModelKeys.IGNORED_CACHES).add(a));
            } else {
               throw ParseUtils.unexpectedAttribute(reader, i);
            }
            break;
         }
         default: {
            throw ParseUtils.unexpectedAttribute(reader, i);
         }
         }
      }

      PathAddress containerAddress = subsystemAddress.append(PathElement.pathElement(ModelKeys.REST_CONNECTOR, name));
      connector.get(OP_ADDR).set(containerAddress.toModelNode());

      operations.add(connector);

      while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {
         Element element = Element.forName(reader.getLocalName());
         switch (element) {
            case AUTHENTICATION: {
               parseRestAuthentication(reader, connector, operations);
               break;
            }
            case ENCRYPTION: {
               parseEncryption(reader, connector, operations);
               break;
            }
            default: {
               throw ParseUtils.unexpectedElement(reader);
            }
         }
      }
   }

}