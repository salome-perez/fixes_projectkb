public class Status {
    public void doBuild(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
        
        final PromotionProcess process = getProcess();
        if (process == null) {
            throw new AbortException("Cannot retrieve the promotion process");
        }
        
        AbstractBuild<?, ?> target = getTarget();
        if (target ==null) {
            throw new AbortException("Cannot get the target build to be promoted");
        }
        
        ManualCondition manualCondition = (ManualCondition) process.getPromotionCondition(ManualCondition.class.getName());     
        if (!PromotionPermissionHelper.hasPermission(target.getProject(), manualCondition)) {
            return;
        }
        
        JSONObject formData = req.getSubmittedForm();
        
        List<ParameterValue> paramValues=null;
        if (formData!=null){
            paramValues = new ArrayList<ParameterValue>();
            if (manualCondition!=null){
            	List<ParameterDefinition> parameterDefinitions=manualCondition.getParameterDefinitions();
                if (parameterDefinitions != null && !parameterDefinitions.isEmpty()) {
                    JSONArray a = JSONArray.fromObject(formData.get("parameter"));

                    for (Object o : a) {
                        final JSONObject jo;
                        if (o instanceof JSONObject) {
                            jo = (JSONObject) o;
                        } else if (o instanceof JSONNull) {
                            continue; // ignore nulls
                        } else {
                            throw new IllegalArgumentException("Array type is not supported " + o);
                        }

                        String name = jo.getString("name");

                        ParameterDefinition d = manualCondition.getParameterDefinition(name);
                        if (d==null)
                            throw new IllegalArgumentException("No such parameter definition: " + name);

                        paramValues.add(d.createValue(req, jo));
                    }
                }
            }
        }
        if (paramValues==null){
        	paramValues = new ArrayList<ParameterValue>();
        }
        Future<Promotion> f = process.scheduleBuild2(target, new UserCause(), paramValues);
        if (f==null)
            LOGGER.warning("Failing to schedule the promotion of "+target);
        // TODO: we need better visual feed back so that the user knows that the build happened.
        rsp.forwardToPreviousPage(req);
    }
}