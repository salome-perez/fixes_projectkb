public class Commandline {
    private void verifyShellState()
    {
        if ( shell.getWorkingDirectory() == null )
        {
            shell.setWorkingDirectory( workingDir );
        }

        if ( shell.getOriginalExecutable() == null )
        {
            shell.setExecutable( executable );
        }
    }

    public String[] getCommandline()
    {
        final String[] args = getArguments();
        String executable = getLiteralExecutable();

        if ( executable == null )
        {
            return args;
        }
        final String[] result = new String[args.length + 1];
        result[0] = executable;
        System.arraycopy( args, 0, result, 1, args.length );
        return result;
    }

    public Shell getShell()
    {
        return shell;
    }

    public void setShell( Shell shell )
    {
        this.shell = shell;
    }

    public Process execute()
        throws CommandLineException
    {
        // TODO: Provided only for backward compat. with <= 1.4
        verifyShellState();

        Process process;

        //addEnvironment( "MAVEN_TEST_ENVAR", "MAVEN_TEST_ENVAR_VALUE" );

        String[] environment = getEnvironmentVariables();

        File workingDir = shell.getWorkingDirectory();

        try
        {
            if ( workingDir == null )
            {
                process = Runtime.getRuntime().exec( getCommandline(), environment, workingDir );
            }
            else
            {
                if ( !workingDir.exists() )
                {
                    throw new CommandLineException( "Working directory \"" + workingDir.getPath()
                        + "\" does not exist!" );
                }
                else if ( !workingDir.isDirectory() )
                {
                    throw new CommandLineException( "Path \"" + workingDir.getPath()
                        + "\" does not specify a directory." );
                }

                process = Runtime.getRuntime().exec( getCommandline(), environment, workingDir );
            }
        }
        catch ( IOException ex )
        {
            throw new CommandLineException( "Error while executing process.", ex );
        }

        return process;
    }

        public int getPosition()
        {
            if ( realPos == -1 )
            {
                realPos = ( getLiteralExecutable() == null ? 0 : 1 );
                for ( int i = 0; i < position; i++ )
                {
                    Arg arg = (Arg) arguments.elementAt( i );
                    realPos += arg.getParts().length;
                }
            }
            return realPos;
        }

    public String[] getShellCommandline()
    {
        // TODO: Provided only for backward compat. with <= 1.4
        verifyShellState();

        return (String[]) getShell().getShellCommandLine( getArguments() ).toArray( new String[0] );
    }

    public String getExecutable()
    {
        String exec = shell.getExecutable();

        if ( exec == null )
        {
            exec = executable;
        }

        return exec;
    }

}