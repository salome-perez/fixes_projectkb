public class Server {
   @RolesAllowed(WRITERS_ROLE)
   public <V> Response putEntry(@Context Request request, @HeaderParam("performAsync") boolean useAsync,
                                @PathParam("cacheName") String cacheName, @PathParam("cacheKey") String key,
                                @HeaderParam("Content-Type") String mediaType, byte[] data,
                                @DefaultValue("-1") @HeaderParam("timeToLiveSeconds") long ttl,
                                @DefaultValue("-1") @HeaderParam("maxIdleTimeSeconds") long idleTime) {
      return protectCacheNotFound(() -> {
         AdvancedCache<String, byte[]> cache = manager.getCache(cacheName);
         if ("POST".equals(request.getMethod()) && cache.containsKey(key)) {
            return Response.status(Response.Status.CONFLICT).build();
         } else {
            CacheEntry<String, V> entry = manager.getInternalEntry(cacheName, key, true);
            if (entry instanceof InternalCacheEntry) {
               InternalCacheEntry ice = (InternalCacheEntry) entry;
               Date lastMod = lastModified(ice);
               Metadata meta = ice.getMetadata();
               if (meta instanceof MimeMetadata) {
                  // The item already exists in the cache, evaluate preconditions based on its attributes and the headers
                  EntityTag etag = calcETAG(ice, (MimeMetadata) meta);
                  Response.ResponseBuilder bldr = request.evaluatePreconditions(lastMod, etag);
                  if (bldr == null) {
                     // Preconditions passed
                     return putInCache(useAsync, cache, key, data, mediaType, ttl, idleTime,
                           Optional.of((byte[]) ice.getValue()));
                  } else {
                     // One of the preconditions failed, build a response
                     return bldr.build();
                  }
               } else {
                  return putInCache(useAsync, cache, key, data, mediaType, ttl, idleTime, Optional.empty());
               }
            } else {
               return putInCache(useAsync, cache, key, data, mediaType, ttl, idleTime, Optional.empty());
            }
         }
      });
   }

   @RolesAllowed({READERS_ROLE, WRITERS_ROLE})
   public <V> Response headEntry(@Context Request request, @HeaderParam("performAsync") boolean useAsync,
                                 @PathParam("cacheName") String cacheName, @PathParam("cacheKey") String key,
                                 @QueryParam("extended") String extended,
                                 @DefaultValue("") @HeaderParam("Cache-Control") String cacheControl) {
      return protectCacheNotFound(() -> {
         CacheEntry<String, V> entry = manager.getInternalEntry(cacheName, key);
         if (entry instanceof InternalCacheEntry) {
            InternalCacheEntry<String, V> ice = (InternalCacheEntry<String, V>) entry;
            Date lastMod = lastModified(ice);
            Date expires = ice.canExpire() ? new Date(ice.getExpiryTime()) : null;
            OptionalInt minFreshSeconds = minFresh(cacheControl);
            return ensureFreshEnoughEntry(expires, minFreshSeconds, () -> {
               Metadata meta = ice.getMetadata();
               if (meta instanceof MimeMetadata) {
                  MimeMetadata mime = (MimeMetadata) meta;
                  Response.ResponseBuilder bldr = request.evaluatePreconditions(lastMod, calcETAG(ice, mime));
                  if (bldr == null) {
                     return extended(mortality(Response.ok()
                                 .type(mime.contentType)
                                 .header(HttpHeaderNames.LAST_MODIFIED, formatDate(lastMod))
                                 .header(HttpHeaderNames.EXPIRES, formatDate(expires))
                                 .cacheControl(calcCacheControl(expires)),
                           mime)
                                 .tag(calcETAG(ice, mime)),
                           cacheName, key, wantExtendedHeaders(extended))
                           .build();
                  } else {
                     return bldr.build();
                  }
               } else {
                  return extended(mortality(Response.ok()
                              .header(HttpHeaderNames.LAST_MODIFIED, formatDate(lastMod))
                              .header(HttpHeaderNames.EXPIRES, formatDate(expires))
                              .cacheControl(calcCacheControl(expires)),
                        meta), cacheName, key, wantExtendedHeaders(extended))
                        .build();
               }
            });
         } else {
            return Response.status(Response.Status.NOT_FOUND).build();
         }
      });
   }

   @PUT
   @POST
   @Path("/{cacheName}/{cacheKey}

   @RolesAllowed(WRITERS_ROLE)
   public Response killCache(@PathParam("cacheName") String cacheName,
                             @DefaultValue("") @HeaderParam("If-Match") String ifMatch,
                             @DefaultValue("") @HeaderParam("If-None-Match") String ifNoneMatch,
                             @DefaultValue("") @HeaderParam("If-Modified-Since") String ifModifiedSince,
                             @DefaultValue("") @HeaderParam("If-Unmodified-Since") String ifUnmodifiedSince) {
      if (ifMatch.isEmpty() && ifNoneMatch.isEmpty() && ifModifiedSince.isEmpty() && ifUnmodifiedSince.isEmpty()) {
         manager.getCache(cacheName).clear();
         return Response.ok().build();
      } else {
         return preconditionNotImplementedResponse();
      }
   }

   @RolesAllowed(WRITERS_ROLE)
   public <V> Response removeEntry(@Context Request request, @HeaderParam("performAsync") boolean useAsync,
                                   @PathParam("cacheName") String cacheName, @PathParam("cacheKey") String key) {
      return protectCacheNotFound(() -> {
         CacheEntry<String, V> entry = manager.getInternalEntry(cacheName, key);
         if (entry instanceof InternalCacheEntry) {
            InternalCacheEntry ice = (InternalCacheEntry) entry;
            Date lastMod = lastModified((InternalCacheEntry) entry);
            Metadata meta = entry.getMetadata();
            if (meta instanceof MimeMetadata) {
               // The item exists in the cache, evaluate preconditions based on its attributes and the headers
               EntityTag etag = calcETAG(ice, (MimeMetadata) meta);
               Response.ResponseBuilder bldr = request.evaluatePreconditions(lastMod, etag);
               if (bldr == null) {
                  // Preconditions passed
                  if (useAsync) {
                     manager.getCache(cacheName).removeAsync(key);
                  } else {
                     manager.getCache(cacheName).remove(key);
                  }
                  return Response.ok().build();
               } else {
                  // One of the preconditions failed, build a response
                  return bldr.build();
               }
            } else {
               if (useAsync) {
                  manager.getCache(cacheName).removeAsync(key);
               } else {
                  manager.getCache(cacheName).remove(key);
               }
               return Response.ok().build();
            }
         } else if (entry == null) {
            return Response.status(Response.Status.NOT_FOUND).build();
         } else {
            throw new IllegalArgumentException("Unsupported entry implementation: " + entry);
         }
      });
   }

   @DELETE
   @Path("/{cacheName}

   public <V> Response getEntry(@Context Request request, @HeaderParam("performAsync") boolean useAsync,
                                @PathParam("cacheName") String cacheName, @PathParam("cacheKey") String key,
                                @QueryParam("extended") String extended,
                                @DefaultValue("") @HeaderParam("Cache-Control") String cacheControl) {
      return protectCacheNotFound(() -> {
         CacheEntry<String, V> entry = manager.getInternalEntry(cacheName, key);
         if (entry instanceof InternalCacheEntry) {
            InternalCacheEntry<String, V> ice = (InternalCacheEntry<String, V>) entry;
            Date lastMod = lastModified(ice);
            Date expires = ice.canExpire() ? new Date(ice.getExpiryTime()) : null;
            OptionalInt minFreshSeconds = minFresh(cacheControl);
            return ensureFreshEnoughEntry(expires, minFreshSeconds, () -> {
               Metadata meta = ice.getMetadata();
               if (meta instanceof MimeMetadata) {
                  return getMimeEntry(request, ice, (MimeMetadata) meta, lastMod, expires, cacheName, extended);
               } else {
                  return getAnyEntry(request, ice, meta, lastMod, expires, cacheName, extended);
               }
            });
         } else {
            return Response.status(Response.Status.NOT_FOUND).build();
         }
      });
   }

   public Response getKeys(@Context Request request, @HeaderParam("performAsync") boolean useAsync,
                           @PathParam("cacheName") String cacheName, @QueryParam("global") String globalKeySet) {
      return protectCacheNotFound(() -> {
         AdvancedCache<String, ?> cache = manager.getCache(cacheName);
         CacheSet<String> keys = cache.keySet();
         Variant variant = request.selectVariant(CollectionVariantListHelper.collectionVariantList);
         String selectedMediaType = variant != null ? variant.getMediaType().toString() : null;
         if (MediaType.TEXT_HTML.equals(selectedMediaType)) {
            return Response.ok().type(MediaType.TEXT_HTML).entity(printIt(pw -> {
               pw.print("<html><body>");
               keys.forEach(key -> {
                  String hkey = Escaper.escapeHtml(key);
                  pw.printf("<a href=\"%s/%s\">%s</a><br/>", cacheName, hkey, hkey);
               });
               pw.print("</body></html>");
            })).build();
         } else if (MediaType.APPLICATION_XML.equals(selectedMediaType)) {
            return Response.ok().type(MediaType.APPLICATION_XML).entity(printIt(pw -> {
               pw.print("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + System.lineSeparator() + System.lineSeparator() + "<keys>");
               keys.forEach(key -> pw.printf("<key>%s</key>", Escaper.escapeXml(key)));
               pw.print("</keys>");
            })).build();
         } else if (MediaType.APPLICATION_JSON.equals(selectedMediaType)) {
            return Response.ok().type(MediaType.APPLICATION_JSON).entity(printIt(pw -> {
               pw.print("keys=[");
               Iterator<String> it = keys.iterator();
               while (it.hasNext()) {
                  pw.printf("\"%s\"", Escaper.escapeJson(it.next()));
                  if (it.hasNext()) pw.print(",");

               }
               pw.print("]");
            })).build();
         } else if (MediaType.TEXT_PLAIN.equals(selectedMediaType)) {
            return Response.ok().type(MediaType.TEXT_PLAIN).entity(printIt(pw -> keys.forEach(pw::println))).build();
         } else if (Server.TextPlainUtf8.equals(selectedMediaType)) {
            return Response.ok().type(Server.TextPlainUtf8Type).entity(printItUTF8(writer -> {
               keys.forEach(key -> {
                  try {
                     writer.write(key);
                     writer.write(System.lineSeparator());
                  } catch (IOException e) {
                     throw new CacheException(e);
                  }
               });
            })).build();
         } else {
            return Response.notAcceptable(CollectionVariantListHelper.collectionVariantList).build();
         }
      });
   }

   @GET
   @Path("/{cacheName}/{cacheKey}")
   @RolesAllowed({READERS_ROLE, WRITERS_ROLE}

}