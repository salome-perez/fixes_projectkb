public class GroupByDesc {
  @Explain(displayName = "keys")
  @Signature
  public String getKeyString() {
    return PlanUtils.getExprListString(keys);
  }

  @Explain(displayName = "keys", explainLevels = { Level.USER }

  @Explain(displayName = "bucketGroup", displayOnlyOnTrue = true)
  @Signature
  public boolean getBucketGroup() {
    return bucketGroup;
  }

  @Explain(displayName = "pruneGroupingSetId", displayOnlyOnTrue = true)
  @Signature
  public boolean pruneGroupingSetId() {
    return groupingSetPosition >= 0 &&
        outputColumnNames.size() != keys.size() + aggregators.size();
  }

  @Explain(displayName = "outputColumnNames")
  @Signature
  public ArrayList<java.lang.String> getOutputColumnNames() {
    return outputColumnNames;
  }

  @Explain(displayName = "Output", explainLevels = { Level.USER }

  @Signature
  public List<String> getAggregatorStrings() {
    List<String> res = new ArrayList<String>();
    for (AggregationDesc agg: aggregators) {
      res.add(agg.getExprString());
    }
    return res;
  }

  @Explain(displayName = "mode")
  @Signature
  public String getModeString() {
    switch (mode) {
    case COMPLETE:
      return "complete";
    case PARTIAL1:
      return "partial1";
    case PARTIAL2:
      return "partial2";
    case PARTIALS:
      return "partials";
    case HASH:
      return "hash";
    case FINAL:
      return "final";
    case MERGEPARTIAL:
      return "mergepartial";
    }

    return "unknown";
  }

}