public class TokenBasedRememberMeServices2 {
    private void secureCookie(Cookie cookie, HttpServletRequest request){
        // if we can mark the cookie HTTP only, do so to protect this cookie even in case of XSS vulnerability.
        if (SET_HTTP_ONLY!=null) {
            try {
                SET_HTTP_ONLY.invoke(cookie,true);
            } catch (IllegalAccessException e) {
                // ignore
            } catch (InvocationTargetException e) {
                // ignore
            }
        }

        // if the user is running Jenkins over HTTPS, we also want to prevent the cookie from leaking in HTTP.
        // whether the login is done over HTTPS or not would be a good enough approximation of whether Jenkins runs in
        // HTTPS or not, so use that.
        cookie.setSecure(request.isSecure());
    }

    @Override
    public Authentication autoLogin(HttpServletRequest request, HttpServletResponse response) {
        if(Jenkins.getInstance().isDisableRememberMe()){
            cancelCookie(request, response, null);
            return null;
        }else {
            try {
                return super.autoLogin(request, response);
            } catch (Exception e) {
                cancelCookie(request, response, "Failed to handle remember-me cookie: " + Functions.printThrowable(e));
                return null;
            }
        }
    }

    @Override
    protected Cookie makeValidCookie(String tokenValueBase64, HttpServletRequest request, long maxAge) {
        Cookie cookie = super.makeValidCookie(tokenValueBase64, request, maxAge);
        secureCookie(cookie, request);
        return cookie;
    }

}