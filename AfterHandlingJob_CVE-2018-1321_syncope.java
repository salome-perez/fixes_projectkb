public class AfterHandlingJob {
    public static void schedule(final SchedulerFactoryBean scheduler, final Map<String, Object> jobMap) {
        @SuppressWarnings("unchecked")
        AfterHandlingJob jobInstance = (AfterHandlingJob) ApplicationContextProvider.getBeanFactory().
                createBean(AfterHandlingJob.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);
        String jobName = AfterHandlingJob.class.getName() + UUID_GENERATOR.generate();

        jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());

        ApplicationContextProvider.getBeanFactory().registerSingleton(jobName, jobInstance);

        JobBuilder jobDetailBuilder = JobBuilder.newJob(AfterHandlingJob.class).
                withIdentity(jobName).
                usingJobData(new JobDataMap(jobMap));

        TriggerBuilder<Trigger> triggerBuilder = TriggerBuilder.newTrigger().
                withIdentity(JobNamer.getTriggerName(jobName)).
                startNow();

        try {
            scheduler.getScheduler().scheduleJob(jobDetailBuilder.build(), triggerBuilder.build());
        } catch (SchedulerException e) {
            LOG.error("Could not schedule, aborting", e);
        }
    }

    private AuditManager auditManager;

    @Override
    public void execute(final JobExecutionContext context) throws JobExecutionException {
        try {
            AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),
                    new AuthContextUtils.Executable<Void>() {

                @Override
                public Void exec() {
                    notificationManager.createTasks(
                            (AfterHandlingEvent) context.getMergedJobDataMap().get(AfterHandlingEvent.JOBMAP_KEY));
                    auditManager.audit(
                            (AfterHandlingEvent) context.getMergedJobDataMap().get(AfterHandlingEvent.JOBMAP_KEY));
                    return null;
                }
            });
        } catch (RuntimeException e) {
            throw new JobExecutionException("While handling notification / audit events", e);
        }
    }

}