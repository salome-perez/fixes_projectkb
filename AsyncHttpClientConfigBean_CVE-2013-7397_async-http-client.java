public class AsyncHttpClientConfigBean {
    void configureDefaults() {
        maxTotalConnections = defaultMaxTotalConnections();
        maxConnectionPerHost = defaultMaxConnectionPerHost();
        connectionTimeOutInMs = defaultConnectionTimeOutInMs();
        webSocketIdleTimeoutInMs = defaultWebSocketIdleTimeoutInMs();
        idleConnectionInPoolTimeoutInMs = defaultIdleConnectionInPoolTimeoutInMs();
        idleConnectionTimeoutInMs = defaultIdleConnectionTimeoutInMs();
        requestTimeoutInMs = defaultRequestTimeoutInMs();
        maxConnectionLifeTimeInMs = defaultMaxConnectionLifeTimeInMs();
        redirectEnabled = defaultRedirectEnabled();
        maxRedirects = defaultMaxRedirects();
        compressionEnabled = defaultCompressionEnabled();
        userAgent = defaultUserAgent();
        allowPoolingConnection = defaultAllowPoolingConnection();
        useRelativeURIsWithSSLProxies = defaultUseRelativeURIsWithSSLProxies();
        requestCompressionLevel = defaultRequestCompressionLevel();
        maxRequestRetry = defaultMaxRequestRetry();
        ioThreadMultiplier = defaultIoThreadMultiplier();
        allowSslConnectionPool = defaultAllowSslConnectionPool();
        useRawUrl = defaultUseRawUrl();
        removeQueryParamOnRedirect = defaultRemoveQueryParamOnRedirect();
        strict302Handling = defaultStrict302Handling();
        hostnameVerifier = defaultHostnameVerifier();
        spdyEnabled = defaultSpdyEnabled();
        spdyInitialWindowSize = defaultSpdyInitialWindowSize();
        spdyMaxConcurrentStreams = defaultSpdyMaxConcurrentStreams();
        acceptAnyCertificate = defaultAcceptAnyCertificate();
        if (defaultUseProxySelector()) {
            proxyServerSelector = ProxyUtils.getJdkDefaultProxyServerSelector();
        } else if (defaultUseProxyProperties()) {
            proxyServerSelector = ProxyUtils.createProxyServerSelector(System.getProperties());
        }
    }

    public AsyncHttpClientConfigBean setAcceptAnyCertificate(boolean acceptAnyCertificate) {
        this.acceptAnyCertificate = acceptAnyCertificate;
        return this;
    }

}