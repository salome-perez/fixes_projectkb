public class SAML2IdPValidator {
    public boolean isValid(final SAML2IdP saml2IdP, final ConstraintValidatorContext context) {
        context.disableDefaultConstraintViolation();

        if (isHtml(saml2IdP.getKey())) {
            context.buildConstraintViolationWithTemplate(
                    getTemplate(EntityViolationType.InvalidKey, "Invalid key")).
                    addPropertyNode("key").addConstraintViolation();

            return false;
        }

        if (saml2IdP.isSelfRegUnmatching() && saml2IdP.isCreateUnmatching()) {
            context.buildConstraintViolationWithTemplate(
                    getTemplate(EntityViolationType.Standard,
                            "Either selfRegUnmatching or createUnmatching, not both")).
                    addPropertyNode("selfRegUnmatching").
                    addPropertyNode("createUnmatching").addConstraintViolation();

            return false;
        }

        long connObjectKeys = IterableUtils.countMatches(saml2IdP.getItems(), new Predicate<SAML2IdPItem>() {

            @Override
            public boolean evaluate(final SAML2IdPItem item) {
                return item.isConnObjectKey();
            }
        });
        if (!saml2IdP.getItems().isEmpty() && connObjectKeys != 1) {
            context.buildConstraintViolationWithTemplate(
                    getTemplate(EntityViolationType.InvalidMapping, "Single ConnObjectKey mapping is required")).
                    addPropertyNode("connObjectKey.size").addConstraintViolation();

            return false;
        }

        boolean isValid = true;

        long passwords = IterableUtils.countMatches(saml2IdP.getItems(), new Predicate<SAML2IdPItem>() {

            @Override
            public boolean evaluate(final SAML2IdPItem item) {
                return item.isPassword();
            }
        });
        if (passwords > 0) {
            context.buildConstraintViolationWithTemplate(
                    getTemplate(EntityViolationType.InvalidMapping, "No password mapping is allowed")).
                    addPropertyNode("password.size").addConstraintViolation();
            isValid = false;
        }

        for (SAML2IdPItem item : saml2IdP.getItems()) {
            for (String className : item.getTransformerClassNames()) {
                Class<?> actionsClass = null;
                boolean isAssignable = false;
                try {
                    actionsClass = Class.forName(className);
                    isAssignable = ItemTransformer.class.isAssignableFrom(actionsClass);
                } catch (Exception e) {
                    LOG.error("Invalid MappingItemTransformer specified: {}", className, e);
                }

                if (actionsClass == null || !isAssignable) {
                    context.buildConstraintViolationWithTemplate(
                            getTemplate(EntityViolationType.InvalidMapping,
                                    "Invalid mapping item trasformer class name")).
                            addPropertyNode("mappingItemTransformerClassName").addConstraintViolation();
                    isValid = false;
                }
            }
        }

        return isValid;
    }

}