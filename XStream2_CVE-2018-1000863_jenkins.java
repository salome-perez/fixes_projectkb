public class XStream2{
    public void toXMLUTF8(Object obj, OutputStream out) throws IOException {
        Writer w = new OutputStreamWriter(out, Charset.forName("UTF-8"));
        w.write("<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n");
        toXML(obj, w);
    }
    @Override
    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
        throw new UnsupportedOperationException("Refusing to marshal " + source.getClass().getName() + " for security reasons; see https://jenkins.io/redirect/class-filter/");
    }

    @Override
    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
        throw new ConversionException("Refusing to unmarshal " + reader.getNodeName() + " for security reasons; see https://jenkins.io/redirect/class-filter/");
    }
    @Override
    public boolean canConvert(Class type) {
        if (type == null) {
            return false;
        }
        String name = type.getName();
        if (JRUBY_PROXY.matcher(name).matches()) {
            return false;
        }
        // claim we can convert all the scary stuff so we can throw exceptions when attempting to do so
        return ClassFilter.DEFAULT.isBlacklisted(name) || ClassFilter.DEFAULT.isBlacklisted(type);
    }

    XStream2(ClassOwnership classOwnership) {
        super(getDefaultDriver());
        init();
        this.classOwnership = classOwnership;
    }
    public void addCriticalField(Class<?> clazz, String field) {
        reflectionConverter.addCriticalField(clazz, field);
    }
}