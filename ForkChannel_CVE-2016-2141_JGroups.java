public class ForkChannel {
    @Override
    public ForkChannel send(Message msg) throws Exception {
        checkClosedOrNotConnected();
        FORK.ForkHeader hdr=msg.getHeader(FORK.ID);
        if(hdr != null)
            hdr.setForkChannelId(fork_channel_id);
        else {
            hdr=new FORK.ForkHeader(null, fork_channel_id);
            msg.putHeader(FORK.ID, hdr);
        }
        prot_stack.down(new Event(Event.MSG, msg));
        return this;
    }

    protected static FORK getFORK(JChannel ch, ProtocolStack.Position position, Class<? extends Protocol> neighbor,
                                  boolean create_fork_if_absent) throws Exception {
        ProtocolStack stack=ch.getProtocolStack();
        FORK fork=stack.findProtocol(FORK.class);
        if(fork == null) {
            if(!create_fork_if_absent)
                throw new IllegalArgumentException("FORK not found in main stack");
            fork = new FORK();
            fork.setProtocolStack(stack);
            stack.insertProtocol(fork, position, neighbor);
        }
        return fork;
    }

    protected void setHeader(Message msg) {
        FORK.ForkHeader hdr=msg.getHeader(FORK.ID);
        if(hdr != null)
            hdr.setForkChannelId(fork_channel_id);
        else
            msg.putHeader(FORK.ID, new FORK.ForkHeader(null, fork_channel_id));
    }

}