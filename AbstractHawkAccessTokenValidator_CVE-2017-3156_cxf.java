public class AbstractHawkAccessTokenValidator {
    public AccessTokenValidation validateAccessToken(MessageContext mc,
        String authScheme, String authSchemeData, MultivaluedMap<String, String> extraProps) 
        throws OAuthServiceException {
         
        Map<String, String> schemeParams = getSchemeParameters(authSchemeData);
        AccessTokenValidation atv = 
            getAccessTokenValidation(mc, authScheme, authSchemeData, extraProps, schemeParams);
        if (isRemoteSignatureValidation()) {
            return atv;
        }
        
        String macKey = atv.getExtraProps().get(OAuthConstants.HAWK_TOKEN_KEY);
        String macAlgo = atv.getExtraProps().get(OAuthConstants.HAWK_TOKEN_ALGORITHM);
        
        
        HttpRequestProperties httpProps = null;
        if (extraProps != null && extraProps.containsKey(HTTP_VERB) && extraProps.containsKey(HTTP_URI)) {
            httpProps = new HttpRequestProperties(URI.create(extraProps.getFirst(HTTP_URI)),
                                                  extraProps.getFirst(HTTP_VERB));
        } else {
            httpProps = new HttpRequestProperties(mc.getUriInfo().getRequestUri(), 
                                                  mc.getHttpServletRequest().getMethod());
        }
        HawkAuthorizationScheme macAuthInfo = new HawkAuthorizationScheme(httpProps, schemeParams);
        String normalizedString = macAuthInfo.getNormalizedRequestString();
        try {
            HmacAlgorithm hmacAlgo = HmacAlgorithm.toHmacAlgorithm(macAlgo);
            byte[] serverMacData = HmacUtils.computeHmac(macKey, hmacAlgo.getJavaName(), normalizedString); 
                                                         
            String clientMacString = schemeParams.get(OAuthConstants.HAWK_TOKEN_SIGNATURE);
            byte[] clientMacData = Base64Utility.decode(clientMacString);
            boolean validMac = MessageDigest.isEqual(serverMacData, clientMacData);
            if (!validMac) {
                AuthorizationUtils.throwAuthorizationFailure(Collections
                    .singleton(OAuthConstants.HAWK_AUTHORIZATION_SCHEME));
            }
        } catch (Base64Exception e) {
            throw new OAuthServiceException(OAuthConstants.SERVER_ERROR, e);
        }
        validateTimestampNonce(macKey, macAuthInfo.getTimestamp(), macAuthInfo.getNonce());
        return atv;
    }

}