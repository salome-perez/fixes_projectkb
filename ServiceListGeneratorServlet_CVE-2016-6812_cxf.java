public class ServiceListGeneratorServlet {
    @SuppressWarnings("unchecked")
    @Override
    public void service(HttpServletRequest request, 
                        HttpServletResponse response) throws ServletException, IOException {
        Object obj = request.getAttribute(ServletController.AUTH_SERVICE_LIST);
        boolean isAuthServiceList = false;
        if (obj != null) {
            isAuthServiceList = Boolean.valueOf(obj.toString());
        }
        if (isAuthServiceList) {
            String authServiceListRealm = (String)request.getAttribute(ServletController.AUTH_SERVICE_LIST_REALM);
            ServiceListJAASAuthenticator authenticator = new ServiceListJAASAuthenticator();
            authenticator.setRealm(authServiceListRealm);
            if (!authenticator.authenticate(request, response)) {
                return;
            }
            request.removeAttribute(ServletController.AUTH_SERVICE_LIST);
            request.removeAttribute(ServletController.AUTH_SERVICE_LIST_REALM);
        }
        AbstractDestination[] destinations = destinationRegistry.getSortedDestinations();
        if (request.getParameter("stylesheet") != null) {
            renderStyleSheet(request, response);
            return;
        }
        List<String> privateEndpoints;
        Map<String, String> atomMap;
        
        if (bus != null) {
            privateEndpoints = (List<String>)bus.getProperty("org.apache.cxf.private.endpoints");
            // TODO : we may introduce a bus extension instead

            atomMap = (Map<String, String>)bus
                .getProperty("org.apache.cxf.extensions.logging.atom.pull");
        } else {
            privateEndpoints = new ArrayList<String>();
            atomMap = new HashMap<String, String>();
        }
        
        AbstractDestination[] soapEndpoints = getSOAPEndpoints(destinations, privateEndpoints);
        AbstractDestination[] restEndpoints = getRestEndpoints(destinations, privateEndpoints);
        ServiceListWriter serviceListWriter;
        if ("false".equals(request.getParameter("formatted"))) {
            boolean renderWsdlList = "true".equals(request.getParameter("wsdlList"));
            serviceListWriter = new UnformattedServiceListWriter(renderWsdlList);
        } else {
            String styleSheetPath;
            if (serviceListStyleSheet != null) {
                styleSheetPath = request.getContextPath() + "/" + serviceListStyleSheet;
            } else {
                styleSheetPath = "";
                String contextPath = request.getContextPath();
                if (contextPath != null) {
                    styleSheetPath += contextPath;
                }
                String servletPath = request.getServletPath();
                if (servletPath != null) {
                    styleSheetPath += servletPath;
                }
                String pathInfo = request.getPathInfo();
                if (pathInfo != null) {
                    styleSheetPath += pathInfo;
                }
                
                if (!styleSheetPath.endsWith("/")) {
                    styleSheetPath += "/";
                }
                styleSheetPath += "?stylesheet=1";
            }
            serviceListWriter = 
                new FormattedServiceListWriter(styleSheetPath, title, showForeignContexts, atomMap);
            
        }
        response.setContentType(serviceListWriter.getContentType());
        Object basePath = request.getAttribute(Message.BASE_PATH);
        serviceListWriter.writeServiceList(response.getWriter(),
                                           basePath == null ? null : basePath.toString(),
                                           soapEndpoints, restEndpoints);
    }

}