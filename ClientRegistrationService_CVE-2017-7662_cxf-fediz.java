public class ClientRegistrationService {
    public ClientTokens revokeClientAccessToken(@PathParam("id") String clientId,
                                                      @PathParam("tokenId") String tokenId,
                                                      @FormParam("client_csrfToken") String csrfToken) {
        // CSRF
        checkCSRFToken(csrfToken);

        return doRevokeClientToken(clientId, tokenId, OAuthConstants.ACCESS_TOKEN);
    }

    @POST
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.TEXT_HTML)
    @Path("/{id}/rt/{tokenId}

    public ClientCodeGrants revokeClientCodeGrant(@PathParam("id") String id,
                                                  @PathParam("code") String code,
                                                  @FormParam("client_csrfToken") String csrfToken) {
        // CSRF
        checkCSRFToken(csrfToken);

        if (dataProvider instanceof AuthorizationCodeDataProvider) {
            ((AuthorizationCodeDataProvider)dataProvider).removeCodeGrant(code);
            return getClientCodeGrants(id);
        }
        return null;
    }

    public RegisteredClients removeClient(@PathParam("id") String id,
                                          @FormParam("client_csrfToken") String csrfToken) {
        // CSRF
        checkCSRFToken(csrfToken);

        Collection<Client> clients = getClientRegistrations();
        for (Iterator<Client> it = clients.iterator(); it.hasNext();) {
            Client c = it.next();
            if (c.getClientId().equals(id)) {
                clientProvider.removeClient(id);
                it.remove();
                Set<String> names = clientNames.get(getUserName());
                if (names != null) {
                    names.remove(c.getApplicationName());
                }
                break;
            }
        }
        return new RegisteredClients(clients);
    }
    @POST
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.TEXT_HTML)
    @Path("/{id}

    @POST
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.TEXT_HTML)
    @Path("/")
    public Response registerForm(@FormParam("client_name") String appName,
                                 @FormParam("client_type") String appType,
                                 @FormParam("client_audience") String audience,
                                 @FormParam("client_redirectURI") String redirectURI,
                                 @FormParam("client_logoutURI") String logoutURI,
                                 @FormParam("client_homeRealm") String homeRealm,
                                 @FormParam("client_csrfToken") String csrfToken
    ) {
        try {
            // CSRF
            checkCSRFToken(csrfToken);

            // Client Name
            if (StringUtils.isEmpty(appName)) {
                throwInvalidRegistrationException("The client name must not be empty");
            }
            // Client Type
            if (StringUtils.isEmpty(appType)) {
                throwInvalidRegistrationException("The client type must not be empty");
            }
            if (!("confidential".equals(appType) || "public".equals(appType))) {
                throwInvalidRegistrationException("An invalid client type was specified: " + appType);
            }
            // Client ID
            String clientId = generateClientId();
            boolean isConfidential = "confidential".equals(appType);
            // Client Secret
            String clientSecret = isConfidential
                ? generateClientSecret()
                : null;

            Client newClient = new Client(clientId, clientSecret, isConfidential, appName);

            // User who registered this client
            String userName = sc.getUserPrincipal().getName();
            UserSubject userSubject = new OidcUserSubject(userName);
            newClient.setResourceOwnerSubject(userSubject);

            // Client Registration Time
            newClient.setRegisteredAt(System.currentTimeMillis() / 1000);

            // Client Realm
            if (homeRealm != null) {
                newClient.setHomeRealm(homeRealm);
                if (homeRealms.containsKey(homeRealm)) {
                    newClient.getProperties().put("homeRealmAlias", homeRealms.get(homeRealm));
                }
            }

            // Client Redirect URIs
            if (!StringUtils.isEmpty(redirectURI)) {
                String[] allUris = redirectURI.trim().split(" ");
                List<String> redirectUris = new LinkedList<String>();
                for (String uri : allUris) {
                    if (!StringUtils.isEmpty(uri)) {
                        if (!isValidURI(uri, false)) {
                            throwInvalidRegistrationException("An invalid redirect URI was specified: " + uri);
                        }
                        redirectUris.add(uri);
                    }
                }
                newClient.setRedirectUris(redirectUris);
            }
            // Client Logout URI
            if (!StringUtils.isEmpty(logoutURI)) {
                String[] logoutUris = logoutURI.split(" ");
                for (String uri : logoutUris) {
                    if (!isValidURI(uri, false)) {
                        throwInvalidRegistrationException("An invalid logout URI was specified: " + uri);
                    }
                }
                //TODO: replace this code with newClient.setLogoutUri() once it becomes available
                newClient.getProperties().put("post_logout_redirect_uris", logoutURI);
            }

            // Client Audience URIs
            if (!StringUtils.isEmpty(audience)) {
                String[] auds = audience.trim().split(" ");
                List<String> registeredAuds = new LinkedList<String>();
                for (String aud : auds) {
                    if (!StringUtils.isEmpty(aud)) {
                        if (!isValidURI(aud, true)) {
                            throwInvalidRegistrationException("An invalid audience URI was specified: " + aud);
                        }
                        registeredAuds.add(aud);
                    }
                }
                newClient.setRegisteredAudiences(registeredAuds);
            }

            // Client Scopes
            if (clientScopes != null && !clientScopes.isEmpty()) {
                newClient.setRegisteredScopes(new ArrayList<String>(clientScopes.keySet()));
            }
            return Response.ok(registerNewClient(newClient)).build();
        } catch (InvalidRegistrationException ex) {
            // For the view handlers to handle it
            return Response.ok(new InvalidRegistration(ex.getMessage())).build();
        }
    }

    public Client resetClient(@PathParam("id") String id,
                              @FormParam("client_csrfToken") String csrfToken) {
        // CSRF
        checkCSRFToken(csrfToken);

        Client c = getRegisteredClient(id);
        if (c.isConfidential()) {
            c.setClientSecret(generateClientSecret());
        }
        clientProvider.setClient(c);
        return c;
    }

    @GET
    @Produces(MediaType.TEXT_HTML)
    @Path("/{id}

    public ClientTokens revokeClientRefreshToken(@PathParam("id") String clientId,
                                                      @PathParam("tokenId") String tokenId,
                                                      @FormParam("client_csrfToken") String csrfToken) {
        // CSRF
        checkCSRFToken(csrfToken);

        return doRevokeClientToken(clientId, tokenId, OAuthConstants.REFRESH_TOKEN);
    }

}