public class TableValidWriteIds {
    public void write(org.apache.thrift.protocol.TProtocol prot, TableValidWriteIds struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.fullTableName);
      oprot.writeI64(struct.writeIdHighWaterMark);
      {
        oprot.writeI32(struct.invalidWriteIds.size());
        for (long _iter574 : struct.invalidWriteIds)
        {
          oprot.writeI64(_iter574);
        }
      }
      oprot.writeBinary(struct.abortedBits);
      BitSet optionals = new BitSet();
      if (struct.isSetMinOpenWriteId()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetMinOpenWriteId()) {
        oprot.writeI64(struct.minOpenWriteId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TableValidWriteIds struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.fullTableName = iprot.readString();
      struct.setFullTableNameIsSet(true);
      struct.writeIdHighWaterMark = iprot.readI64();
      struct.setWriteIdHighWaterMarkIsSet(true);
      {
        org.apache.thrift.protocol.TList _list575 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.invalidWriteIds = new ArrayList<Long>(_list575.size);
        long _elem576;
        for (int _i577 = 0; _i577 < _list575.size; ++_i577)
        {
          _elem576 = iprot.readI64();
          struct.invalidWriteIds.add(_elem576);
        }
      }
      struct.setInvalidWriteIdsIsSet(true);
      struct.abortedBits = iprot.readBinary();
      struct.setAbortedBitsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.minOpenWriteId = iprot.readI64();
        struct.setMinOpenWriteIdIsSet(true);
      }
    }

}