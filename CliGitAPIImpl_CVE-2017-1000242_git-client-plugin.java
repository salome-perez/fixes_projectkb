public class CliGitAPIImpl {
    private File createSshKeyFile(SSHUserPrivateKey sshUser) throws IOException, InterruptedException {
        File key = createTempFile("ssh", ".key");
        try (PrintWriter w = new PrintWriter(key, Charset.defaultCharset().toString())) {
            List<String> privateKeys = sshUser.getPrivateKeys();
            for (String s : privateKeys) {
                w.println(s);
            }
        }
        new FilePath(key).chmod(0400);
        return key;
    }
    private File createUnixSshAskpass(SSHUserPrivateKey sshUser) throws IOException {
        File ssh = createTempFile("pass", ".sh");
        try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {
            w.println("#!/bin/sh");
            w.println("echo '" + quoteUnixCredentials(Secret.toString(sshUser.getPassphrase())) + "'");
        }
        ssh.setExecutable(true);
        return ssh;
    }
    private File createWindowsGitSSH(File key, String user) throws IOException {
        File ssh = createTempFile("ssh", ".bat");

        File sshexe = getSSHExecutable();

        try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {
            w.println("@echo off");
            w.println("\"" + sshexe.getAbsolutePath() + "\" -i \"" + key.getAbsolutePath() +"\" -l \"" + user + "\" -o StrictHostKeyChecking=no %* ");
        }
        ssh.setExecutable(true);
        return ssh;
    }
    File createWindowsBatFile(String userName, String password) throws IOException {
        File askpass = createTempFile("pass", ".bat");
        try (PrintWriter w = new PrintWriter(askpass, Charset.defaultCharset().toString())) {
            w.println("@set arg=%~1");
            w.println("@if (%arg:~0,8%)==(Username) echo " + escapeWindowsCharsForUnquotedString(userName));
            w.println("@if (%arg:~0,8%)==(Password) echo " + escapeWindowsCharsForUnquotedString(password));
        }
        askpass.setExecutable(true);
        return askpass;
    }
    private File createWindowsSshAskpass(SSHUserPrivateKey sshUser) throws IOException {
        File ssh = createTempFile("pass", ".bat");
        try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {
            // avoid echoing command as part of the password
            w.println("@echo off");
            // no surrounding double quotes on windows echo -- they are echoed too
            w.println("echo " + escapeWindowsCharsForUnquotedString(Secret.toString(sshUser.getPassphrase())));
            w.flush();
        }
        ssh.setExecutable(true);
        return ssh;
    }
    private File createUnixStandardAskpass(StandardUsernamePasswordCredentials creds) throws IOException {
        File askpass = createTempFile("pass", ".sh");
        try (PrintWriter w = new PrintWriter(askpass, Charset.defaultCharset().toString())) {
            w.println("#!/bin/sh");
            w.println("case \"$1\" in");
            w.println("Username*) echo '" + quoteUnixCredentials(creds.getUsername()) + "' ;;");
            w.println("Password*) echo '" + quoteUnixCredentials(Secret.toString(creds.getPassword())) + "' ;;");
            w.println("esac");
        }
        askpass.setExecutable(true);
        return askpass;
    }
    private File createUnixGitSSH(File key, String user) throws IOException {
        File ssh = createTempFile("ssh", ".sh");
        try (PrintWriter w = new PrintWriter(ssh, Charset.defaultCharset().toString())) {
            w.println("#!/bin/sh");
            // ${SSH_ASKPASS} might be ignored if ${DISPLAY} is not set
            w.println("if [ -z \"${DISPLAY}\" ]; then");
            w.println("  DISPLAY=:123.456");
            w.println("  export DISPLAY");
            w.println("fi");
            w.println("ssh -i \"" + key.getAbsolutePath() + "\" -l \"" + user + "\" -o StrictHostKeyChecking=no \"$@\"");
        }
        ssh.setExecutable(true);
        return ssh;
    }
    public void commit(String message) throws GitException, InterruptedException {
        File f = null;
        try {
            f = createTempFile("gitcommit", ".txt");
            try (OutputStream out = Files.newOutputStream(f.toPath())) {
                out.write(message.getBytes(Charset.defaultCharset().toString()));
            }
            launchCommand("commit", "-F", f.getAbsolutePath());

        } catch (GitException e) {
            throw new GitException("Cannot commit " + message, e);
        } catch (FileNotFoundException e) {
            throw new GitException("Cannot commit " + message, e);
        } catch (IOException e) {
            throw new GitException("Cannot commit " + message, e);
        } finally {
            deleteTempFile(f);
        }
    }
    private void createNote(String note, String namespace, String command ) throws GitException, InterruptedException {
        File msg = null;
        try {
            msg = createTempFile("git-note", ".txt");
            FileUtils.writeStringToFile(msg,note);
            launchCommand("notes", "--ref=" + namespace, command, "-F", msg.getAbsolutePath());
        } catch (IOException | GitException e) {
            throw new GitException("Could not apply note " + note, e);
        } finally {
            deleteTempFile(msg);
        }
    }    
}