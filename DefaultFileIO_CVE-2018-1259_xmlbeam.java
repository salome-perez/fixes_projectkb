public class DefaultFileIO {
    public <T> T read(final Class<T> projectionInterface) throws IOException {
        try {
            Document document = projector.config().createDocumentBuilder().parse(file);
            return projector.projectDOMNode(document, projectionInterface);
        } catch (SAXException e) {
            throw new XBDocumentParsingException(e);
        }
    }

    @SuppressWarnings("resource")
    @Override
    public <T> CloseableMap<T> bindAsMapOf(final Class<T> valueType) throws IOException {
        DefaultXPathBinder.validateEvaluationType(valueType);
        if ((failIfNotExists) && (!file.exists())) {
            throw new FileNotFoundException(file.getAbsolutePath());
        }
        final Document[] document = new Document[1];
        try {
            if (file.exists()) {
                document[0] = projector.config().createDocumentBuilder().parse(file);
            } else {
                document[0] = projector.config().createDocumentBuilder().newDocument();
            }
            InvocationContext invocationContext = new InvocationContext(null, null, null, null, null, valueType, projector);
            return new DefaultFileMap<T>(document[0], invocationContext, new Closeable() {
                final Document doc = document[0];

                @Override
                public void close() throws IOException {
                    try {
                        FileOutputStream fileOutPutStream = new FileOutputStream(file);
                        DOMHelper.trim(doc);
                        projector.config().createTransformer().transform(new DOMSource(doc), new StreamResult(fileOutPutStream));
                        fileOutPutStream.flush();
                        fileOutPutStream.close();
                    } catch (TransformerException e) {
                        throw new XBException("Could not write to file " + file.getAbsolutePath(), e);
                    }
                }
            }, valueType);
        } catch (SAXException e) {
            throw new XBDocumentParsingException(e);
        }
    }

    @Override
    public <T> XBAutoMap<T> readAsMapOf(final Class<T> valueType) throws IOException {
        DefaultXPathBinder.validateEvaluationType(valueType);
        try {
            Document document = projector.config().createDocumentBuilder().parse(file);
            InvocationContext invocationContext = new InvocationContext(null, null, null, null, null, valueType, projector);
            return new AutoMap<T>(document, invocationContext, valueType);
        } catch (SAXException e) {
            throw new XBDocumentParsingException(e);
        }
    }

}