public class Parameters {
    public String[] getParameterValues(String name) {
        handleQueryParameters();
        // no "facade"
        ArrayList values = (ArrayList) paramHashValues.get(name);
        if (values == null) {
            return null;
        }
        return (String[]) values.toArray(new String[values.size()]);
    }

    public void setEncoding( String s ) {
        encoding=s;
        if(log.isDebugEnabled()) {
            log.debug( "Set encoding to " + s );
        }
    }

    public String getEncoding() {
        return encoding;
    }

    private void addParam( String key, String value ) {
        if( key==null ) return;
        ArrayList values = (ArrayList) paramHashValues.get(key);
        if (values == null) {
            values = new ArrayList(1);
            paramHashValues.put(key, values);
        }
        values.add(value);
    }

    public void addParameterValues(String key, String[] newValues) {
        if (key == null) {
            return;
        }
        ArrayList values = (ArrayList) paramHashValues.get(key);
        if (values == null) {
            values = new ArrayList(newValues.length);
            paramHashValues.put(key, values);
        } else {
            values.ensureCapacity(values.size() + newValues.length);
        }
        for (int i = 0; i < newValues.length; i++) {
            values.add(newValues[i]);
        }
    }

    private void urlDecode(ByteChunk bc)
        throws IOException {
        if( urlDec==null ) {
            urlDec=new UDecoder();   
        }
        urlDec.convert(bc);
    }

    public String getParameter(String name ) {
        handleQueryParameters();
        ArrayList values = (ArrayList) paramHashValues.get(name);
        if (values != null) {
            if(values.size() == 0) {
                return "";
            }
            return (String) values.get(0);
        } else {
            return null;
        }
    }

    public String paramsAsString() {
        StringBuffer sb = new StringBuffer();
        Iterator it = paramHashValues.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry e = (Map.Entry) it.next();
            sb.append(e.getKey()).append('=');
            ArrayList values = (ArrayList) e.getValue();
            for(int i = 0; i < values.size(); i++) {
                sb.append(values.get(i)).append(',');
            }
            sb.append('\n');
        }
        return sb.toString();
    }

    public void handleQueryParameters() {
        if( didQueryParameters ) return;

        didQueryParameters=true;

        if( queryMB==null || queryMB.isNull() )
            return;
        
        if(log.isDebugEnabled()) {
            log.debug("Decoding query " + decodedQuery + " " +
                    queryStringEncoding);
        }

        try {
            decodedQuery.duplicate( queryMB );
        } catch (IOException e) {
            // Can't happen, as decodedQuery can't overflow
            e.printStackTrace();
        }
        processParameters( decodedQuery, queryStringEncoding );
    }

    public Enumeration getParameterNames() {
        handleQueryParameters();
        return Collections.enumeration(paramHashValues.keySet());
    }

    public void setQueryStringEncoding( String s ) {
        queryStringEncoding=s;
        if(log.isDebugEnabled()) {
            log.debug( "Set query string encoding to " + s );
        }
    }

    public void recycle() {
        parameterCount = 0;
        paramHashValues.clear();
        didQueryParameters=false;
        encoding=null;
        decodedQuery.recycle();
        parseFailed = false;
    }

    public void processParameters( MessageBytes data, String encoding ) {
        if( data==null || data.isNull() || data.getLength() <= 0 ) return;

        if( data.getType() != MessageBytes.T_BYTES ) {
            data.toBytes();
        }
        ByteChunk bc=data.getByteChunk();
        processParameters( bc.getBytes(), bc.getOffset(),
                           bc.getLength(), getCharset(encoding));
    }

}