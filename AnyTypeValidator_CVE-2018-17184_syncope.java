public class AnyTypeValidator {
    public boolean isValid(final AnyType anyType, final ConstraintValidatorContext context) {
        context.disableDefaultConstraintViolation();

        boolean isValid = true;

        if (isHtml(anyType.getKey())) {
            context.buildConstraintViolationWithTemplate(
                    getTemplate(EntityViolationType.InvalidKey, "Invalid key")).
                    addPropertyNode("key").addConstraintViolation();

            isValid = false;
        }

        boolean nameKindMatch;
        switch (anyType.getKind()) {
            case USER:
                nameKindMatch = AnyTypeKind.USER.name().equalsIgnoreCase(anyType.getKey());
                break;

            case GROUP:
                nameKindMatch = AnyTypeKind.GROUP.name().equalsIgnoreCase(anyType.getKey());
                break;

            case ANY_OBJECT:
            default:
                nameKindMatch = !AnyTypeKind.USER.name().equalsIgnoreCase(anyType.getKey())
                        && !AnyTypeKind.GROUP.name().equalsIgnoreCase(anyType.getKey())
                        && !SyncopeConstants.REALM_ANYTYPE.equalsIgnoreCase(anyType.getKey());
        }
        if (!nameKindMatch) {
            context.buildConstraintViolationWithTemplate(
                    getTemplate(EntityViolationType.InvalidAnyType, "Name / kind mismatch")).
                    addPropertyNode("name").addConstraintViolation();
        }

        return isValid && nameKindMatch;
    }

}