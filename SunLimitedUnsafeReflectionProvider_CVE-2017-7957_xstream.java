public class SunLimitedUnsafeReflectionProvider {
    public Object newInstance(Class type) {
        if (exception != null) {
            ObjectAccessException ex = new ObjectAccessException("Cannot construct type", exception);
            ex.add("construction-type", type.getName());
            throw ex;
        }
        ErrorWritingException ex = null;
        if (type == void.class || type == Void.class) {
            ex = new ConversionException("Type void cannot have an instance");
        } else {
            try {
                return unsafe.allocateInstance(type);
            } catch (final SecurityException e) {
                ex = new ObjectAccessException("Cannot construct type", e);
            } catch (final InstantiationException e) {
                ex = new ConversionException("Cannot construct type", e);
            } catch (final IllegalArgumentException e) {
                ex = new ObjectAccessException("Cannot construct type", e);
            }
        }
        ex.add("construction-type", type.getName());
        throw ex;
    }

}