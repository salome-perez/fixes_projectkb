public class DefaultReportJobDelegate {
    @Transactional
    @Override
    public void execute(final String reportKey) throws JobExecutionException {
        Report report = reportDAO.find(reportKey);
        if (report == null) {
            throw new JobExecutionException("Report " + reportKey + " not found");
        }

        if (!report.isActive()) {
            LOG.info("Report {} not active, aborting...", reportKey);
            return;
        }

        // 1. create execution
        ReportExec execution = entityFactory.newEntity(ReportExec.class);
        execution.setStatus(ReportExecStatus.STARTED);
        execution.setStart(new Date());
        execution.setReport(report);
        execution = reportExecDAO.save(execution);

        report.add(execution);
        report = reportDAO.save(report);

        // 2. define a SAX handler for generating result as XML
        TransformerHandler handler;

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ZipOutputStream zos = new ZipOutputStream(baos);
        zos.setLevel(Deflater.BEST_COMPRESSION);
        try {
            handler = TRANSFORMER_FACTORY.newTransformerHandler();
            Transformer serializer = handler.getTransformer();
            serializer.setOutputProperty(OutputKeys.ENCODING, StandardCharsets.UTF_8.name());
            serializer.setOutputProperty(OutputKeys.INDENT, "yes");

            // a single ZipEntry in the ZipOutputStream
            zos.putNextEntry(new ZipEntry(report.getName()));

            // streaming SAX handler in a compressed byte array stream
            handler.setResult(new StreamResult(zos));
        } catch (Exception e) {
            throw new JobExecutionException("While configuring for SAX generation", e, true);
        }

        execution.setStatus(ReportExecStatus.RUNNING);
        execution = reportExecDAO.save(execution);

        status.set("Starting");

        // 3. actual report execution
        StringBuilder reportExecutionMessage = new StringBuilder();
        try {
            // report header
            handler.startDocument();
            AttributesImpl atts = new AttributesImpl();
            atts.addAttribute("", "", ReportXMLConst.ATTR_NAME, ReportXMLConst.XSD_STRING, report.getName());
            handler.startElement("", "", ReportXMLConst.ELEMENT_REPORT, atts);

            status.set("Generating report header");

            // iterate over reportlet instances defined for this report
            List<? extends ReportletConf> reportletConfs = report.getReportletConfs();
            for (int i = 0; i < reportletConfs.size() && !interrupt; i++) {
                Class<? extends Reportlet> reportletClass =
                        implementationLookup.getReportletClass(reportletConfs.get(i).getClass());
                if (reportletClass == null) {
                    LOG.warn("Could not find matching reportlet for {}", reportletConfs.get(i).getClass());
                } else {
                    // fetch (or create) reportlet
                    Reportlet reportlet;
                    if (ApplicationContextProvider.getBeanFactory().containsSingleton(reportletClass.getName())) {
                        reportlet = (Reportlet) ApplicationContextProvider.getBeanFactory().
                                getSingleton(reportletClass.getName());
                    } else {
                        reportlet = (Reportlet) ApplicationContextProvider.getBeanFactory().
                                createBean(reportletClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);
                        ApplicationContextProvider.getBeanFactory().
                                registerSingleton(reportletClass.getName(), reportlet);
                    }

                    // invoke reportlet
                    try {
                        status.set("Invoking reportlet " + reportletClass.getName());
                        reportlet.extract(reportletConfs.get(i), handler, status);
                    } catch (Throwable t) {
                        LOG.error("While executing reportlet {} for report {}", reportlet, reportKey, t);

                        execution.setStatus(ReportExecStatus.FAILURE);

                        Throwable effective = t instanceof ReportException
                                ? t.getCause()
                                : t;
                        reportExecutionMessage.
                                append(ExceptionUtils2.getFullStackTrace(effective)).
                                append("\n==================\n");
                    }
                }
            }
            if (interrupt) {
                LOG.debug("Report job {} interrupted", reportKey);
                interrupted = true;
            }

            // report footer
            status.set("Generating report footer");

            handler.endElement("", "", ReportXMLConst.ELEMENT_REPORT);
            handler.endDocument();

            if (!ReportExecStatus.FAILURE.name().equals(execution.getStatus())) {
                execution.setStatus(ReportExecStatus.SUCCESS);
            }
        } catch (Exception e) {
            execution.setStatus(ReportExecStatus.FAILURE);
            reportExecutionMessage.append(ExceptionUtils2.getFullStackTrace(e));

            throw new JobExecutionException(e, true);
        } finally {
            status.set("Completed");

            try {
                zos.closeEntry();
                zos.close();
                baos.close();
            } catch (IOException e) {
                LOG.error("While closing StreamResult's backend", e);
            }

            execution.setExecResult(baos.toByteArray());
            execution.setMessage(reportExecutionMessage.toString());
            execution.setEnd(new Date());
            reportExecDAO.save(execution);
        }
    }

}