public class DefaultConverter {
    @Override
    public List<VariantInfo> getVariants(Class<?> source) {
        List<VariantInfo> result = null;

        if (source != null) {
            if (String.class.isAssignableFrom(source)
                    || StringRepresentation.class.isAssignableFrom(source)) {
                result = addVariant(result, VARIANT_ALL);
            } else if (File.class.isAssignableFrom(source)
                    || FileRepresentation.class.isAssignableFrom(source)) {
                result = addVariant(result, VARIANT_ALL);
            } else if (InputStream.class.isAssignableFrom(source)
                    || InputRepresentation.class.isAssignableFrom(source)) {
                result = addVariant(result, VARIANT_ALL);
            } else if (Reader.class.isAssignableFrom(source)
                    || ReaderRepresentation.class.isAssignableFrom(source)) {
                result = addVariant(result, VARIANT_ALL);
            } else if (Representation.class.isAssignableFrom(source)) {
                result = addVariant(result, VARIANT_ALL);
            } else if (Form.class.isAssignableFrom(source)) {
                result = addVariant(result, VARIANT_FORM);
            } else if (Serializable.class.isAssignableFrom(source)) {
                result = addVariant(result, VARIANT_OBJECT);
                if (VARIANT_OBJECT_XML_SUPPORTED) {
                    result = addVariant(result, VARIANT_OBJECT_XML);
                }
            }
        }

        return result;
    }

    public List<Class<?>> getObjectClasses(Variant source) {
        List<Class<?>> result = null;
        result = addObjectClass(result, String.class);
        result = addObjectClass(result, InputStream.class);
        result = addObjectClass(result, Reader.class);
        result = addObjectClass(result, ReadableByteChannel.class);

        if (source.getMediaType() != null) {
            MediaType mediaType = source.getMediaType();

            if (MediaType.APPLICATION_JAVA_OBJECT.equals(mediaType)
                    || (VARIANT_OBJECT_XML_SUPPORTED && MediaType.APPLICATION_JAVA_OBJECT_XML
                            .equals(mediaType))) {
                result = addObjectClass(result, Object.class);
            } else if (MediaType.APPLICATION_WWW_FORM.equals(mediaType)) {
                result = addObjectClass(result, Form.class);
            }
        }

        return result;
    }

    @Override
    public <T> void updatePreferences(List<Preference<MediaType>> preferences,
            Class<T> entity) {
        if (Form.class.isAssignableFrom(entity)) {
            updatePreferences(preferences, MediaType.APPLICATION_WWW_FORM, 1.0F);
        } else if (Serializable.class.isAssignableFrom(entity)) {
            updatePreferences(preferences, MediaType.APPLICATION_JAVA_OBJECT,
                    1.0F);
            if (VARIANT_OBJECT_XML_SUPPORTED) {
                updatePreferences(preferences,
                        MediaType.APPLICATION_JAVA_OBJECT_XML, 1.0F);
            }
        } else if (String.class.isAssignableFrom(entity)
                || Reader.class.isAssignableFrom(entity)) {
            updatePreferences(preferences, MediaType.TEXT_PLAIN, 1.0F);
            updatePreferences(preferences, MediaType.TEXT_ALL, 0.5F);
        } else if (InputStream.class.isAssignableFrom(entity)
                || ReadableByteChannel.class.isAssignableFrom(entity)) {
            updatePreferences(preferences, MediaType.APPLICATION_OCTET_STREAM,
                    1.0F);
            updatePreferences(preferences, MediaType.APPLICATION_ALL, 0.5F);
        }
    }

    @Override
    public <T> float score(Representation source, Class<T> target,
            Resource resource) {
        float result = -1.0F;

        if (target != null) {
            if (target.isAssignableFrom(source.getClass())) {
                result = 1.0F;
            } else if (String.class.isAssignableFrom(target)) {
                result = 1.0F;
            } else if (StringRepresentation.class.isAssignableFrom(target)) {
                result = 1.0F;
            } else if (EmptyRepresentation.class.isAssignableFrom(target)) {
                result = 1.0F;
            } else if (File.class.isAssignableFrom(target)) {
                if (source instanceof FileRepresentation) {
                    result = 1.0F;
                }
            } else if (Form.class.isAssignableFrom(target)) {
                if (MediaType.APPLICATION_WWW_FORM.isCompatible(source
                        .getMediaType())) {
                    result = 1.0F;
                } else {
                    result = 0.5F;
                }
            } else if (InputStream.class.isAssignableFrom(target)) {
                result = 1.0F;
            } else if (InputRepresentation.class.isAssignableFrom(target)) {
                result = 1.0F;
            } else if (Reader.class.isAssignableFrom(target)) {
                result = 1.0F;
            } else if (ReaderRepresentation.class.isAssignableFrom(target)) {
                result = 1.0F;
            } else if (Serializable.class.isAssignableFrom(target)
                    || target.isPrimitive()) {
                if (MediaType.APPLICATION_JAVA_OBJECT.equals(source
                        .getMediaType())) {
                    result = 1.0F;
                } else if (MediaType.APPLICATION_JAVA_OBJECT
                        .isCompatible(source.getMediaType())) {
                    result = 0.6F;
                } else if (VARIANT_OBJECT_XML_SUPPORTED
                        && MediaType.APPLICATION_JAVA_OBJECT_XML.equals(source
                                .getMediaType())) {
                    result = 1.0F;
                } else if (VARIANT_OBJECT_XML_SUPPORTED
                        && MediaType.APPLICATION_JAVA_OBJECT_XML
                                .isCompatible(source.getMediaType())) {
                    result = 0.6F;
                } else {
                    result = 0.5F;
                }
            }
        } else if (source instanceof ObjectRepresentation<?>) {
            result = 1.0F;
        }

        return result;
    }

}