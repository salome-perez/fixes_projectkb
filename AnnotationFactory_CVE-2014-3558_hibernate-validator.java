public class AnnotationFactory {
	private static <T extends Annotation> T getProxyInstance(Class<T> proxyClass, InvocationHandler handler) throws
			SecurityException, NoSuchMethodException, IllegalArgumentException, InstantiationException,
			IllegalAccessException, InvocationTargetException {
		final Constructor<T> constructor = run( GetDeclaredConstructor.action(
				proxyClass,
				InvocationHandler.class
		) );
		return run( ConstructorInstance.action( constructor, handler ) );
	}

	public static <T extends Annotation> T create(AnnotationDescriptor<T> descriptor) {
		@SuppressWarnings("unchecked")
		Class<T> proxyClass = (Class<T>) Proxy.getProxyClass(
				run( GetClassLoader.fromClass( descriptor.type() ) ),
				descriptor.type()
		);
		InvocationHandler handler = new AnnotationProxy( descriptor );
		try {
			return getProxyInstance( proxyClass, handler );
		}
		catch ( RuntimeException e ) {
			throw e;
		}
		catch ( Exception e ) {
			throw new RuntimeException( e );
		}
	}

}