public class ReportValidator {
    public boolean isValid(final Report report, final ConstraintValidatorContext context) {
        context.disableDefaultConstraintViolation();

        boolean isValid = true;

        if (isHtml(report.getName())) {
            context.buildConstraintViolationWithTemplate(
                    getTemplate(EntityViolationType.InvalidName, "Invalid name")).
                    addPropertyNode("name").addConstraintViolation();

            isValid = false;
        }

        if (report.getCronExpression() != null) {
            try {
                new CronExpression(report.getCronExpression());
            } catch (ParseException e) {
                LOG.error("Invalid cron expression '" + report.getCronExpression() + "'", e);
                isValid = false;

                context.disableDefaultConstraintViolation();
                context.buildConstraintViolationWithTemplate(
                        getTemplate(EntityViolationType.InvalidReport, "Invalid cron expression")).
                        addPropertyNode("cronExpression").addConstraintViolation();
            }
        }

        Set<String> reportletNames = CollectionUtils.collect(report.getReportletConfs(),
                new Transformer<ReportletConf, String>() {

            @Override
            public String transform(final ReportletConf input) {
                return input.getName();
            }
        }, new HashSet<String>());
        if (reportletNames.size() != report.getReportletConfs().size()) {
            LOG.error("Reportlet name must be unique");
            isValid = false;

            context.disableDefaultConstraintViolation();
            context.buildConstraintViolationWithTemplate(
                    getTemplate(EntityViolationType.InvalidReport, "Reportlet name must be unique")).
                    addPropertyNode("reportletConfs").addConstraintViolation();
        }

        return isValid;
    }

}