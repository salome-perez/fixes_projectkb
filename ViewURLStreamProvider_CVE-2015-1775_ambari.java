public class ViewURLStreamProvider {
  private HttpURLConnection getHttpURLConnection(String spec, String requestMethod,
                                                 Map<String, String> headers, byte[] info)
      throws IOException {
    if (!isProxyCallAllowed(spec)) {
      LOG.warn("Call to " + spec + " is not allowed. See ambari.properties proxy.allowed.hostports.");
      throw new IOException("Call to " + spec + " is not allowed. See ambari.properties proxy.allowed.hostports.");
    }

    // adapt the headers to the internal URLStreamProvider processURL signature

    Map<String, List<String>> headerMap = new HashMap<String, List<String>>();
    for (Map.Entry<String, String> entry : headers.entrySet()) {
      headerMap.put(entry.getKey(), Collections.singletonList(entry.getValue()));
    }
    return streamProvider.processURL(spec, requestMethod, info, headerMap);
  }

  private InputStream getInputStream(String spec, String requestMethod, Map<String, String> headers, byte[] info)
      throws IOException {
    if (!isProxyCallAllowed(spec)) {
      LOG.warn("Call to " + spec + " is not allowed. See ambari.properties proxy.allowed.hostports.");
      throw new IOException("Call to " + spec + " is not allowed. See ambari.properties proxy.allowed.hostports.");
    }

    HttpURLConnection connection = getHttpURLConnection(spec, requestMethod, headers, info);

    int responseCode = connection.getResponseCode();

    return responseCode >= ProxyService.HTTP_ERROR_RANGE_START ?
        connection.getErrorStream() : connection.getInputStream();
  }

}