public class FileParameterValue {
    private File getFileParameterFolderUnderBuild(AbstractBuild<?, ?> build){
        return new File(build.getRootDir(), FOLDER_NAME);
    }

    private File getLocationUnderBuild(AbstractBuild build) {
        return new File(getFileParameterFolderUnderBuild(build), location);
    }

            public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {
            	if (!StringUtils.isEmpty(location) && !StringUtils.isEmpty(file.getName())) {
            	    listener.getLogger().println("Copying file to "+location);
                    FilePath ws = build.getWorkspace();
                    if (ws == null) {
                        throw new IllegalStateException("The workspace should be created when setUp method is called");
                    }
                    if (!ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE && !ws.isDescendant(location)) {
                        listener.error("Rejecting file path escaping base directory with relative path: " + location);
                        // force the build to fail
                        return null;
                    }
                    FilePath locationFilePath = ws.child(location);
                    locationFilePath.getParent().mkdirs();
            	    locationFilePath.copyFrom(file);
                    locationFilePath.copyTo(new FilePath(getLocationUnderBuild(build)));
            	}
                return new Environment() {};
            }

    public void doDynamic(StaplerRequest request, StaplerResponse response) throws ServletException, IOException {
        if (("/" + originalFileName).equals(request.getRestOfPath())) {
            AbstractBuild build = (AbstractBuild)request.findAncestor(AbstractBuild.class).getObject();
            File fileParameter = getLocationUnderBuild(build);

            if (!ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE) {
                File fileParameterFolder = getFileParameterFolderUnderBuild(build);

                //TODO can be replaced by Util#isDescendant in 2.80+
                Path child = fileParameter.getAbsoluteFile().toPath().normalize();
                Path parent = fileParameterFolder.getAbsoluteFile().toPath().normalize();
                if (!child.startsWith(parent)) {
                    throw new IllegalStateException("The fileParameter tried to escape the expected folder: " + location);
                }
            }

            if (fileParameter.isFile()) {
                try (InputStream data = Files.newInputStream(fileParameter.toPath())) {
                    long lastModified = fileParameter.lastModified();
                    long contentLength = fileParameter.length();
                    if (request.hasParameter("view")) {
                        response.serveFile(request, data, lastModified, contentLength, "plain.txt");
                    } else {
                        response.serveFile(request, data, lastModified, contentLength, originalFileName);
                    }
                } catch (InvalidPathException e) {
                    throw new IOException(e);
                }
            }
        }
    }

    @Override
    public BuildWrapper createBuildWrapper(AbstractBuild<?,?> build) {
        return new BuildWrapper() {
            @Override
            public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {
            	if (!StringUtils.isEmpty(location) && !StringUtils.isEmpty(file.getName())) {
            	    listener.getLogger().println("Copying file to "+location);
                    FilePath ws = build.getWorkspace();
                    if (ws == null) {
                        throw new IllegalStateException("The workspace should be created when setUp method is called");
                    }
                    if (!ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE && !ws.isDescendant(location)) {
                        listener.error("Rejecting file path escaping base directory with relative path: " + location);
                        // force the build to fail
                        return null;
                    }
                    FilePath locationFilePath = ws.child(location);
                    locationFilePath.getParent().mkdirs();
            	    locationFilePath.copyFrom(file);
                    locationFilePath.copyTo(new FilePath(getLocationUnderBuild(build)));
            	}
                return new Environment() {};
            }
        };
    }

}