public class DefaultInflightRepository {
    @Override
    public Collection<InflightExchange> browse(String fromRouteId, int limit, boolean sortByLongestDuration) {
        List<InflightExchange> answer = new ArrayList<InflightExchange>();

        List<Exchange> values;
        if (fromRouteId == null) {
            // all values
            values = new ArrayList<Exchange>(inflight.values());
        } else {
            // only if route match
            values = new ArrayList<Exchange>();
            for (Exchange exchange : inflight.values()) {
                String exchangeRouteId = exchange.getFromRouteId();
                if (fromRouteId.equals(exchangeRouteId)) {
                    values.add(exchange);
                }
            }
        }

        if (sortByLongestDuration) {
            values.sort(new Comparator<Exchange>() {
                @Override
                public int compare(Exchange e1, Exchange e2) {
                    long d1 = getExchangeDuration(e1);
                    long d2 = getExchangeDuration(e2);
                    return Long.compare(d1, d2);
                }
            });
        } else {
            // else sort by exchange id
            values.sort(new Comparator<Exchange>() {
                @Override
                public int compare(Exchange e1, Exchange e2) {
                    return e1.getExchangeId().compareTo(e2.getExchangeId());
                }
            });
        }

        for (Exchange exchange : values) {
            answer.add(new InflightExchangeEntry(exchange));
            if (limit > 0 && answer.size() >= limit) {
                break;
            }
        }
        return Collections.unmodifiableCollection(answer);
    }

}