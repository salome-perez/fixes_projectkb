public class LockRequest {
    public void write(org.apache.thrift.protocol.TProtocol prot, LockRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.component.size());
        for (LockComponent _iter606 : struct.component)
        {
          _iter606.write(oprot);
        }
      }
      oprot.writeString(struct.user);
      oprot.writeString(struct.hostname);
      BitSet optionals = new BitSet();
      if (struct.isSetTxnid()) {
        optionals.set(0);
      }
      if (struct.isSetAgentInfo()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTxnid()) {
        oprot.writeI64(struct.txnid);
      }
      if (struct.isSetAgentInfo()) {
        oprot.writeString(struct.agentInfo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LockRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list607 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.component = new ArrayList<LockComponent>(_list607.size);
        LockComponent _elem608;
        for (int _i609 = 0; _i609 < _list607.size; ++_i609)
        {
          _elem608 = new LockComponent();
          _elem608.read(iprot);
          struct.component.add(_elem608);
        }
      }
      struct.setComponentIsSet(true);
      struct.user = iprot.readString();
      struct.setUserIsSet(true);
      struct.hostname = iprot.readString();
      struct.setHostnameIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.txnid = iprot.readI64();
        struct.setTxnidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.agentInfo = iprot.readString();
        struct.setAgentInfoIsSet(true);
      }
    }

}