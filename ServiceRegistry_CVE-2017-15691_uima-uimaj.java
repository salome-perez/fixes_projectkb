public class ServiceRegistry {
  public void load(String fname) throws Exception {

    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
    dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
    DocumentBuilder docBuilder = dbf.newDocumentBuilder();


    FileReader readme = new FileReader(fname);
    Document doc;
    try {
      doc = docBuilder.parse(new InputSource(readme));
    } finally {
      readme.close();
    }

    Element root = doc.getDocumentElement();

    if (!root.getNodeName().equals("CONFIGURATION"))
      throw new RuntimeException("Illegal file specified");

    NodeList services = doc.getElementsByTagName("SERVICE");
    Node N, C;
    Hashtable H;
    Object S;

    for (int i = 0; i < services.getLength(); i++) {
      N = services.item(i);
      H = new Hashtable();

      NodeList children = N.getChildNodes();

      for (int j = 0; j < children.getLength(); j++) {
        C = children.item(j);

        if (C.getNodeType() == Node.TEXT_NODE)
          continue;

        NodeList subchildren;

        subchildren = C.getChildNodes();

        if (subchildren.getLength() == 1 && C.getFirstChild().getNodeType() == Node.TEXT_NODE) {
          // Simple elements
          H.put(C.getNodeName(), C.getFirstChild().getNodeValue());
        } else {
          // Complex elements
          H.put(C.getNodeName(), XMLToVinci.xmlToVinciFrame(new StringReader(constructXMLString(C,
                  true))));
        }
      } // End for j

      // Hack to distinguish Service from ServiceAlias
      if (!(H.get("TARGET") != null && H.get("NAME") != null))
        try {
          S = new Service(H);
        } catch (RuntimeException e) {
          System.err.println("Got exception while adding Service : " + H.get("NAME").toString());
          System.err.println("Exception generated : " + e);
          continue;
        }
      else
        S = new ServiceAlias((String) H.get("NAME"), (String) H.get("TARGET"));

      addEntry(S);
    }

  }

}