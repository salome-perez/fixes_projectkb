public class RealmValidator {
    public boolean isValid(final Realm realm, final ConstraintValidatorContext context) {
        context.disableDefaultConstraintViolation();

        boolean isValid = true;

        if (SyncopeConstants.ROOT_REALM.equals(realm.getName())) {
            if (realm.getParent() != null) {
                isValid = false;

                context.buildConstraintViolationWithTemplate(
                        getTemplate(EntityViolationType.InvalidRealm, "Root realm cannot have a parent realm")).
                        addPropertyNode("parent").addConstraintViolation();
            }
        } else {
            if (realm.getParent() == null) {
                isValid = false;

                context.buildConstraintViolationWithTemplate(
                        getTemplate(EntityViolationType.InvalidRealm, "A realm needs to reference a parent realm")).
                        addPropertyNode("parent").addConstraintViolation();
            }

            if (!REALM_NAME_PATTERN.matcher(realm.getName()).matches()) {
                isValid = false;

                context.buildConstraintViolationWithTemplate(
                        getTemplate(EntityViolationType.InvalidRealm, "Only alphanumeric chars allowed in realm name")).
                        addPropertyNode("name").addConstraintViolation();
            }
        }

        if (!realm.getActionsClassNames().isEmpty()) {
            for (String className : realm.getActionsClassNames()) {
                Class<?> actionsClass = null;
                boolean isAssignable = false;
                try {
                    actionsClass = Class.forName(className);
                    isAssignable = LogicActions.class.isAssignableFrom(actionsClass);
                } catch (Exception e) {
                    LOG.error("Invalid {} specified", LogicActions.class.getName(), e);
                    isValid = false;
                }

                if (actionsClass == null || !isAssignable) {
                    isValid = false;

                    context.disableDefaultConstraintViolation();
                    context.buildConstraintViolationWithTemplate(
                            getTemplate(EntityViolationType.InvalidRealm, "Invalid class name")).
                            addPropertyNode("actionsClassName").addConstraintViolation();
                }
            }
        }

        return isValid;
    }

}