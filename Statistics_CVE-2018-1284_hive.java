public class Statistics {
  public String toUserLevelExplainString() {
    StringBuilder sb = new StringBuilder();
    if (runtimeStats) {
      sb.append("runtime: ");
    }
    sb.append("rows=");
    sb.append(numRows);
    if (runTimeNumRows >= 0) {
      sb.append("/" + runTimeNumRows);
    }
    sb.append(" width=");
    // just to be safe about numRows
    if (numRows != 0) {
      sb.append(dataSize / numRows);
    } else {
      sb.append("-1");
    }
    return sb.toString();
  }

  public Statistics scaleToRowCount(long newRowCount, boolean downScaleOnly) {
    Statistics ret;
    ret = clone();
    if (numRows == 0) {
      return ret;
    }
    if (downScaleOnly && newRowCount >= numRows) {
      return ret;
    }
    // FIXME: using real scaling by new/old ration might yield better results?
    ret.numRows = newRowCount;
    ret.dataSize = StatsUtils.safeMult(getAvgRowSize(), newRowCount);
    return ret;
  }

  @Override
  @Explain(displayName = "Statistics")
  public String toString() {
    StringBuilder sb = new StringBuilder();
    if (runtimeStats) {
      sb.append("(RUNTIME) ");
    }
    sb.append("Num rows: ");
    sb.append(numRows);
    if (runTimeNumRows >= 0) {
      sb.append("/" + runTimeNumRows);
    }
    sb.append(" Data size: ");
    sb.append(dataSize);
    sb.append(" Basic stats: ");
    sb.append(basicStatsState);
    sb.append(" Column stats: ");
    sb.append(columnStatsState);
    return sb.toString();
  }

  @Explain(displayName = "Statistics", explainLevels = { Level.USER }

  public String extendedToString() {
    StringBuilder sb = new StringBuilder();
    if (runtimeStats) {
      sb.append(" (runtime) ");
    }
    sb.append(" numRows: ");
    sb.append(numRows);
    sb.append(" dataSize: ");
    sb.append(dataSize);
    sb.append(" basicStatsState: ");
    sb.append(basicStatsState);
    sb.append(" colStatsState: ");
    sb.append(columnStatsState);
    sb.append(" colStats: ");
    sb.append(columnStats);
    return sb.toString();
  }

}