public class AmqpReceiver {
                    public void onResponse(AmqpProtocolConverter converter, Response response) throws IOException {
                        if (response.isException()) {
                            ExceptionResponse error = (ExceptionResponse) response;
                            Rejected rejected = new Rejected();
                            ErrorCondition condition = new ErrorCondition();

                            if (error.getException() instanceof SecurityException) {
                                condition.setCondition(AmqpError.UNAUTHORIZED_ACCESS);
                            } else if (error.getException() instanceof ResourceAllocationException) {
                                condition.setCondition(AmqpError.RESOURCE_LIMIT_EXCEEDED);
                            } else {
                                condition.setCondition(Symbol.valueOf("failed"));
                            }

                            condition.setDescription(error.getException().getMessage());
                            rejected.setError(condition);
                            delivery.disposition(rejected);
                        } else {
                            if (getEndpoint().getCredit() <= (getConfiguredReceiverCredit() * .3)) {
                                LOG.debug("Sending more credit ({}) to producer: {}", getConfiguredReceiverCredit() - getEndpoint().getCredit(), getProducerId());
                                getEndpoint().flow(getConfiguredReceiverCredit() - getEndpoint().getCredit());
                            }

                            if (remoteState != null && remoteState instanceof TransactionalState) {
                                TransactionalState txAccepted = new TransactionalState();
                                txAccepted.setOutcome(Accepted.getInstance());
                                txAccepted.setTxnId(((TransactionalState) remoteState).getTxnId());

                                delivery.disposition(txAccepted);
                            } else {
                                delivery.disposition(Accepted.getInstance());
                            }
                        }

                        delivery.settle();
                        session.pumpProtonToSocket();
                    }

    @Override
    protected void processDelivery(final Delivery delivery, Buffer deliveryBytes) throws Exception {
        if (!isClosed()) {
            EncodedMessage em = new EncodedMessage(delivery.getMessageFormat(), deliveryBytes.data, deliveryBytes.offset, deliveryBytes.length);

            InboundTransformer transformer = getTransformer();
            ActiveMQMessage message = null;

            while (transformer != null) {
                try {
                    message = (ActiveMQMessage) transformer.transform(em);
                    break;
                } catch (Exception e) {
                    LOG.debug("Transform of message using [{}] transformer, failed", getTransformer().getTransformerName());
                    LOG.trace("Transformation error:", e);

                    transformer = transformer.getFallbackTransformer();
                }
            }

            if (message == null) {
                throw new IOException("Failed to transform incoming delivery, skipping.");
            }

            current = null;

            if (isAnonymous()) {
                Destination toDestination = message.getJMSDestination();
                if (toDestination == null || !(toDestination instanceof ActiveMQDestination)) {
                    Rejected rejected = new Rejected();
                    ErrorCondition condition = new ErrorCondition();
                    condition.setCondition(Symbol.valueOf("failed"));
                    condition.setDescription("Missing to field for message sent to an anonymous producer");
                    rejected.setError(condition);
                    delivery.disposition(rejected);
                    return;
                }
            } else {
                message.setJMSDestination(getDestination());
            }

            message.setProducerId(getProducerId());

            // Always override the AMQP client's MessageId with our own.  Preserve
            // the original in the TextView property for later Ack.
            MessageId messageId = new MessageId(getProducerId(), messageIdGenerator.getNextSequenceId());

            MessageId amqpMessageId = message.getMessageId();
            if (amqpMessageId != null) {
                if (amqpMessageId.getTextView() != null) {
                    messageId.setTextView(amqpMessageId.getTextView());
                } else {
                    messageId.setTextView(amqpMessageId.toString());
                }
            }

            message.setMessageId(messageId);

            LOG.trace("Inbound Message:{} from Producer:{}",
                      message.getMessageId(), getProducerId() + ":" + messageId.getProducerSequenceId());

            final DeliveryState remoteState = delivery.getRemoteState();
            if (remoteState != null && remoteState instanceof TransactionalState) {
                TransactionalState txState = (TransactionalState) remoteState;
                TransactionId txId = new LocalTransactionId(session.getConnection().getConnectionId(), toLong(txState.getTxnId()));
                session.enlist(txId);
                message.setTransactionId(txId);
            }

            message.onSend();
            if (!delivery.remotelySettled()) {
                sendToActiveMQ(message, new ResponseHandler() {

                    @Override
                    public void onResponse(AmqpProtocolConverter converter, Response response) throws IOException {
                        if (response.isException()) {
                            ExceptionResponse error = (ExceptionResponse) response;
                            Rejected rejected = new Rejected();
                            ErrorCondition condition = new ErrorCondition();

                            if (error.getException() instanceof SecurityException) {
                                condition.setCondition(AmqpError.UNAUTHORIZED_ACCESS);
                            } else if (error.getException() instanceof ResourceAllocationException) {
                                condition.setCondition(AmqpError.RESOURCE_LIMIT_EXCEEDED);
                            } else {
                                condition.setCondition(Symbol.valueOf("failed"));
                            }

                            condition.setDescription(error.getException().getMessage());
                            rejected.setError(condition);
                            delivery.disposition(rejected);
                        } else {
                            if (getEndpoint().getCredit() <= (getConfiguredReceiverCredit() * .3)) {
                                LOG.debug("Sending more credit ({}) to producer: {}", getConfiguredReceiverCredit() - getEndpoint().getCredit(), getProducerId());
                                getEndpoint().flow(getConfiguredReceiverCredit() - getEndpoint().getCredit());
                            }

                            if (remoteState != null && remoteState instanceof TransactionalState) {
                                TransactionalState txAccepted = new TransactionalState();
                                txAccepted.setOutcome(Accepted.getInstance());
                                txAccepted.setTxnId(((TransactionalState) remoteState).getTxnId());

                                delivery.disposition(txAccepted);
                            } else {
                                delivery.disposition(Accepted.getInstance());
                            }
                        }

                        delivery.settle();
                        session.pumpProtonToSocket();
                    }
                });
            } else {
                if (getEndpoint().getCredit() <= (getConfiguredReceiverCredit() * .3)) {
                    LOG.debug("Sending more credit ({}) to producer: {}", getConfiguredReceiverCredit() - getEndpoint().getCredit(), getProducerId());
                    getEndpoint().flow(getConfiguredReceiverCredit() - getEndpoint().getCredit());
                    session.pumpProtonToSocket();
                }

                delivery.settle();
                sendToActiveMQ(message);
            }
        }
    }

}