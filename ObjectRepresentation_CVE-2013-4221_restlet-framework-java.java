public class ObjectRepresentation {
                    protected Class<?> resolveClass(
                            java.io.ObjectStreamClass desc)
                            throws java.io.IOException,
                            java.lang.ClassNotFoundException {
                        return Class
                                .forName(desc.getName(), false, classLoader);
                    }

    @Override
    public void write(OutputStream outputStream) throws IOException {
        if (MediaType.APPLICATION_JAVA_OBJECT.isCompatible(getMediaType())) {
            ObjectOutputStream oos = new ObjectOutputStream(outputStream);
            oos.writeObject(getObject());
            oos.flush();
            // [ifndef android]
        } else if (MediaType.APPLICATION_JAVA_OBJECT_XML
                .isCompatible(getMediaType())) {
            java.beans.XMLEncoder encoder = new java.beans.XMLEncoder(
                    outputStream);
            encoder.writeObject(getObject());
            encoder.close();
            // [enddef]
        }
    }

    @Override
    public void release() {
        setObject(null);
        super.release();
    }

    public T getObject() throws IOException {
        return this.object;
    }

    public void setObject(T object) {
        this.object = object;
    }

}