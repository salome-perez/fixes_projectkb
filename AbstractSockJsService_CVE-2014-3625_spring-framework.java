public class AbstractSockJsService {
	@Override
	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,
			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {

		if (sockJsPath == null) {
			logger.error("Expected SockJS path. Failing request: " + request.getURI());
			response.setStatusCode(HttpStatus.NOT_FOUND);
			return;
		}

		try {
			request.getHeaders();
		}
		catch (InvalidMediaTypeException ex) {
			// As per SockJS protocol content-type can be ignored (it's always json)
		}

		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : "";
		try {
			if (sockJsPath.equals("") || sockJsPath.equals("/")) {
				logger.debug(requestInfo);
				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET));
				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET));
			}
			else if (sockJsPath.equals("/info")) {
				logger.debug(requestInfo);
				this.infoHandler.handle(request, response);
			}
			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {
				logger.debug(requestInfo);
				this.iframeHandler.handle(request, response);
			}
			else if (sockJsPath.equals("/websocket")) {
				if (isWebSocketEnabled()) {
					logger.debug(requestInfo);
					handleRawWebSocketRequest(request, response, wsHandler);
				}
				else if (logger.isDebugEnabled()) {
					logger.debug("WebSocket disabled, ignoring " + requestInfo);
				}
			}
			else {
				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/");
				if (pathSegments.length != 3) {
					logger.error("Ignoring invalid transport request " + requestInfo);
					response.setStatusCode(HttpStatus.NOT_FOUND);
					return;
				}
				String serverId = pathSegments[0];
				String sessionId = pathSegments[1];
				String transport = pathSegments[2];

				if (!isWebSocketEnabled() && transport.equals("websocket")) {
					logger.debug("WebSocket transport is disabled, ignoring " + requestInfo);
					response.setStatusCode(HttpStatus.NOT_FOUND);
					return;
				}
				else if (!validateRequest(serverId, sessionId, transport)) {
					logger.error("Ignoring transport request " + requestInfo);
					response.setStatusCode(HttpStatus.NOT_FOUND);
					return;
				}
				handleTransportRequest(request, response, wsHandler, sessionId, transport);
			}
			response.close();
		}
		catch (IOException ex) {
			throw new SockJsException("Failed to write to the response", null, ex);
		}
	}

}