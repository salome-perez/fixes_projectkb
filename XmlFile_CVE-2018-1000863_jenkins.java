public class XmlFile {
    public void write( Object o ) throws IOException {
        mkdirs();
        AtomicFileWriter w = new AtomicFileWriter(file);
        try {
            w.write("<?xml version='1.1' encoding='UTF-8'?>\n");
            beingWritten.put(o, null);
            writing.set(file);
            try {
                xs.toXML(o, w);
            } finally {
                beingWritten.remove(o);
                writing.set(null);
            }
            w.commit();
        } catch(RuntimeException e) {
            throw new IOException(e);
        } finally {
            w.abort();
        }
    }

    public Object read() throws IOException {
        if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine("Reading "+file);
        }
        try (InputStream in = new BufferedInputStream(Files.newInputStream(file.toPath()))) {
            return xs.fromXML(in);
        } catch (RuntimeException | Error e) {
            throw new IOException("Unable to read "+file,e);
        }
    }

    private Object unmarshal(Object o, boolean nullOut) throws IOException {
        try (InputStream in = new BufferedInputStream(Files.newInputStream(file.toPath()))) {
            // TODO: expose XStream the driver from XStream
            if (nullOut) {
                return ((XStream2) xs).unmarshal(DEFAULT_DRIVER.createReader(in), o, null, true);
            } else {
                return xs.unmarshal(DEFAULT_DRIVER.createReader(in), o);
            }
        } catch (RuntimeException | Error e) {
            throw new IOException("Unable to read "+file,e);
        }
    }

}