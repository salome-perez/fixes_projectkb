public class CreationMetadata {
    public void write(org.apache.thrift.protocol.TProtocol prot, CreationMetadata struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.dbName);
      oprot.writeString(struct.tblName);
      {
        oprot.writeI32(struct.tablesUsed.size());
        for (String _iter664 : struct.tablesUsed)
        {
          oprot.writeString(_iter664);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetValidTxnList()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetValidTxnList()) {
        oprot.writeString(struct.validTxnList);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreationMetadata struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.dbName = iprot.readString();
      struct.setDbNameIsSet(true);
      struct.tblName = iprot.readString();
      struct.setTblNameIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set665 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.tablesUsed = new HashSet<String>(2*_set665.size);
        String _elem666;
        for (int _i667 = 0; _i667 < _set665.size; ++_i667)
        {
          _elem666 = iprot.readString();
          struct.tablesUsed.add(_elem666);
        }
      }
      struct.setTablesUsedIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.validTxnList = iprot.readString();
        struct.setValidTxnListIsSet(true);
      }
    }

}