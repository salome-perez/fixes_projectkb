public class PartitionValuesRequest {
    public void write(org.apache.thrift.protocol.TProtocol prot, PartitionValuesRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.dbName);
      oprot.writeString(struct.tblName);
      {
        oprot.writeI32(struct.partitionKeys.size());
        for (FieldSchema _iter498 : struct.partitionKeys)
        {
          _iter498.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetApplyDistinct()) {
        optionals.set(0);
      }
      if (struct.isSetFilter()) {
        optionals.set(1);
      }
      if (struct.isSetPartitionOrder()) {
        optionals.set(2);
      }
      if (struct.isSetAscending()) {
        optionals.set(3);
      }
      if (struct.isSetMaxParts()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetApplyDistinct()) {
        oprot.writeBool(struct.applyDistinct);
      }
      if (struct.isSetFilter()) {
        oprot.writeString(struct.filter);
      }
      if (struct.isSetPartitionOrder()) {
        {
          oprot.writeI32(struct.partitionOrder.size());
          for (FieldSchema _iter499 : struct.partitionOrder)
          {
            _iter499.write(oprot);
          }
        }
      }
      if (struct.isSetAscending()) {
        oprot.writeBool(struct.ascending);
      }
      if (struct.isSetMaxParts()) {
        oprot.writeI64(struct.maxParts);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PartitionValuesRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.dbName = iprot.readString();
      struct.setDbNameIsSet(true);
      struct.tblName = iprot.readString();
      struct.setTblNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list500 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.partitionKeys = new ArrayList<FieldSchema>(_list500.size);
        FieldSchema _elem501;
        for (int _i502 = 0; _i502 < _list500.size; ++_i502)
        {
          _elem501 = new FieldSchema();
          _elem501.read(iprot);
          struct.partitionKeys.add(_elem501);
        }
      }
      struct.setPartitionKeysIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.applyDistinct = iprot.readBool();
        struct.setApplyDistinctIsSet(true);
      }
      if (incoming.get(1)) {
        struct.filter = iprot.readString();
        struct.setFilterIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list503 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partitionOrder = new ArrayList<FieldSchema>(_list503.size);
          FieldSchema _elem504;
          for (int _i505 = 0; _i505 < _list503.size; ++_i505)
          {
            _elem504 = new FieldSchema();
            _elem504.read(iprot);
            struct.partitionOrder.add(_elem504);
          }
        }
        struct.setPartitionOrderIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ascending = iprot.readBool();
        struct.setAscendingIsSet(true);
      }
      if (incoming.get(4)) {
        struct.maxParts = iprot.readI64();
        struct.setMaxPartsIsSet(true);
      }
    }

}