public class Destination {
    void processingComplete(Message message) {
        SequenceType sequenceType = RMContextUtils.retrieveRMProperties(message, false).getSequence();
        if (null == sequenceType) {
            return;
        }

        DestinationSequence seq = getSequence(sequenceType.getIdentifier());

        if (null != seq) {
            long mn = sequenceType.getMessageNumber().longValue();
            seq.processingComplete(mn);
            seq.purgeAcknowledged(mn);
            // remove acknowledged undelivered message
            seq.removeDeliveringMessageNumber(mn);
            if (seq.isTerminated() && seq.allAcknowledgedMessagesDelivered()) {
                removeSequence(seq);
            }
        }
        CachedOutputStream saved = (CachedOutputStream)message.remove(RMMessageConstants.SAVED_CONTENT);
        if (saved != null) {
            saved.releaseTempFileHold();
            try {
                saved.close();
            } catch (IOException e) {
                // ignore
            }
        }
    }

    public DestinationSequence getSequence(Identifier id) {
        return map.get(id.getValue());
    }

    public void acknowledge(Message message) throws SequenceFault, RMException {
        RMProperties rmps = RMContextUtils.retrieveRMProperties(message, false);
        SequenceType sequenceType = rmps.getSequence();
        if (null == sequenceType) {
            return;
        }

        DestinationSequence seq = getSequence(sequenceType.getIdentifier());

        if (null != seq) {
            if (seq.applyDeliveryAssurance(sequenceType.getMessageNumber(), message)) {
                if (MessageUtils.isTrue(message.get(RMMessageConstants.DELIVERING_ROBUST_ONEWAY))) {
                    return;
                }

                seq.acknowledge(message);

                if (null != rmps.getCloseSequence()) {
                    seq.setLastMessageNumber(sequenceType.getMessageNumber());
                    ackImmediately(seq, message);
                }
            } else {
                try {
                    message.getInterceptorChain().abort();
                    if (seq.sendAcknowledgement()) {
                        ackImmediately(seq, message);
                    }
                    Exchange exchange = message.getExchange();
                    Conduit conduit = exchange.getDestination().getBackChannel(message);
                    if (conduit != null) {
                        //for a one-way, the back channel could be
                        //null if it knows it cannot send anything.
                        if (seq.sendAcknowledgement()) {
                            AddressingProperties maps = RMContextUtils.retrieveMAPs(message, false, false);
                            InternalContextUtils.rebaseResponse(null, maps, message);
                        } else {
                            Message response = createMessage(exchange);
                            response.setExchange(exchange);
                            response.remove(Message.CONTENT_TYPE);
                            conduit.prepare(response);
                            conduit.close(response);
                        }
                    }
                } catch (IOException e) {
                    LOG.log(Level.SEVERE, e.getMessage());
                    throw new RMException(e);
                }
            }
        } else {
            ProtocolVariation protocol = RMContextUtils.getProtocolVariation(message);
            RMConstants consts = protocol.getConstants();
            SequenceFaultFactory sff = new SequenceFaultFactory(consts);
            throw sff.createUnknownSequenceFault(sequenceType.getIdentifier());
        }

    }

    void releaseDeliveringStatus(Message message) {
        RMProperties rmps = RMContextUtils.retrieveRMProperties(message, false);
        SequenceType sequenceType = rmps.getSequence();
        if (null != sequenceType) {
            DestinationSequence seq = getSequence(sequenceType.getIdentifier());
            if (null != seq) {
                seq.removeDeliveringMessageNumber(sequenceType.getMessageNumber());
            }
        }
    }

}